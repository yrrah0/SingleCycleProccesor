// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2024 22:31:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ProcessorMIPSBenchTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProcessorMIPSBenchTest_vlg_sample_tst(
	GClock,
	GResetBar,
	ValueSelect,
	sampler_tx
);
input  GClock;
input  GResetBar;
input [2:0] ValueSelect;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GResetBar or ValueSelect)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ProcessorMIPSBenchTest_vlg_check_tst (
	BranchAddressO,
	BranchMuxO,
	BranchOffsetO,
	BranchOut,
	InstructionOut,
	JumpAddressO,
	JumpO,
	MemWriteOut,
	MuxOut,
	PC4AddedO,
	PCin,
	PCOut,
	ReadReg1O,
	ReadReg2O,
	RegWriteOut,
	WriteRegO,
	ZeroOut,
	sampler_rx
);
input [31:0] BranchAddressO;
input [31:0] BranchMuxO;
input [31:0] BranchOffsetO;
input  BranchOut;
input [31:0] InstructionOut;
input [31:0] JumpAddressO;
input  JumpO;
input  MemWriteOut;
input [7:0] MuxOut;
input [31:0] PC4AddedO;
input [31:0] PCin;
input [31:0] PCOut;
input [4:0] ReadReg1O;
input [4:0] ReadReg2O;
input  RegWriteOut;
input [4:0] WriteRegO;
input  ZeroOut;
input sampler_rx;

reg [31:0] BranchAddressO_expected;
reg [31:0] BranchMuxO_expected;
reg [31:0] BranchOffsetO_expected;
reg  BranchOut_expected;
reg [31:0] InstructionOut_expected;
reg [31:0] JumpAddressO_expected;
reg  JumpO_expected;
reg  MemWriteOut_expected;
reg [7:0] MuxOut_expected;
reg [31:0] PC4AddedO_expected;
reg [31:0] PCin_expected;
reg [31:0] PCOut_expected;
reg [4:0] ReadReg1O_expected;
reg [4:0] ReadReg2O_expected;
reg  RegWriteOut_expected;
reg [4:0] WriteRegO_expected;
reg  ZeroOut_expected;

reg [31:0] BranchAddressO_prev;
reg [31:0] BranchMuxO_prev;
reg [31:0] BranchOffsetO_prev;
reg  BranchOut_prev;
reg [31:0] InstructionOut_prev;
reg [31:0] JumpAddressO_prev;
reg  JumpO_prev;
reg  MemWriteOut_prev;
reg [7:0] MuxOut_prev;
reg [31:0] PC4AddedO_prev;
reg [31:0] PCin_prev;
reg [31:0] PCOut_prev;
reg [4:0] ReadReg1O_prev;
reg [4:0] ReadReg2O_prev;
reg  RegWriteOut_prev;
reg [4:0] WriteRegO_prev;
reg  ZeroOut_prev;

reg [31:0] BranchAddressO_expected_prev;
reg [31:0] BranchMuxO_expected_prev;
reg [31:0] BranchOffsetO_expected_prev;
reg  BranchOut_expected_prev;
reg [31:0] InstructionOut_expected_prev;
reg [31:0] JumpAddressO_expected_prev;
reg  JumpO_expected_prev;
reg  MemWriteOut_expected_prev;
reg [7:0] MuxOut_expected_prev;
reg [31:0] PC4AddedO_expected_prev;
reg [31:0] PCin_expected_prev;
reg [31:0] PCOut_expected_prev;
reg [4:0] ReadReg1O_expected_prev;
reg [4:0] ReadReg2O_expected_prev;
reg  RegWriteOut_expected_prev;
reg [4:0] WriteRegO_expected_prev;
reg  ZeroOut_expected_prev;

reg [31:0] last_BranchAddressO_exp;
reg [31:0] last_BranchMuxO_exp;
reg [31:0] last_BranchOffsetO_exp;
reg  last_BranchOut_exp;
reg [31:0] last_InstructionOut_exp;
reg [31:0] last_JumpAddressO_exp;
reg  last_JumpO_exp;
reg  last_MemWriteOut_exp;
reg [7:0] last_MuxOut_exp;
reg [31:0] last_PC4AddedO_exp;
reg [31:0] last_PCin_exp;
reg [31:0] last_PCOut_exp;
reg [4:0] last_ReadReg1O_exp;
reg [4:0] last_ReadReg2O_exp;
reg  last_RegWriteOut_exp;
reg [4:0] last_WriteRegO_exp;
reg  last_ZeroOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	BranchAddressO_prev = BranchAddressO;
	BranchMuxO_prev = BranchMuxO;
	BranchOffsetO_prev = BranchOffsetO;
	BranchOut_prev = BranchOut;
	InstructionOut_prev = InstructionOut;
	JumpAddressO_prev = JumpAddressO;
	JumpO_prev = JumpO;
	MemWriteOut_prev = MemWriteOut;
	MuxOut_prev = MuxOut;
	PC4AddedO_prev = PC4AddedO;
	PCin_prev = PCin;
	PCOut_prev = PCOut;
	ReadReg1O_prev = ReadReg1O;
	ReadReg2O_prev = ReadReg2O;
	RegWriteOut_prev = RegWriteOut;
	WriteRegO_prev = WriteRegO;
	ZeroOut_prev = ZeroOut;
end

// update expected /o prevs

always @(trigger)
begin
	BranchAddressO_expected_prev = BranchAddressO_expected;
	BranchMuxO_expected_prev = BranchMuxO_expected;
	BranchOffsetO_expected_prev = BranchOffsetO_expected;
	BranchOut_expected_prev = BranchOut_expected;
	InstructionOut_expected_prev = InstructionOut_expected;
	JumpAddressO_expected_prev = JumpAddressO_expected;
	JumpO_expected_prev = JumpO_expected;
	MemWriteOut_expected_prev = MemWriteOut_expected;
	MuxOut_expected_prev = MuxOut_expected;
	PC4AddedO_expected_prev = PC4AddedO_expected;
	PCin_expected_prev = PCin_expected;
	PCOut_expected_prev = PCOut_expected;
	ReadReg1O_expected_prev = ReadReg1O_expected;
	ReadReg2O_expected_prev = ReadReg2O_expected;
	RegWriteOut_expected_prev = RegWriteOut_expected;
	WriteRegO_expected_prev = WriteRegO_expected;
	ZeroOut_expected_prev = ZeroOut_expected;
end


// expected BranchAddressO[ 31 ]
initial
begin
	BranchAddressO_expected[31] = 1'bX;
end 
// expected BranchAddressO[ 30 ]
initial
begin
	BranchAddressO_expected[30] = 1'bX;
end 
// expected BranchAddressO[ 29 ]
initial
begin
	BranchAddressO_expected[29] = 1'bX;
end 
// expected BranchAddressO[ 28 ]
initial
begin
	BranchAddressO_expected[28] = 1'bX;
end 
// expected BranchAddressO[ 27 ]
initial
begin
	BranchAddressO_expected[27] = 1'bX;
end 
// expected BranchAddressO[ 26 ]
initial
begin
	BranchAddressO_expected[26] = 1'bX;
end 
// expected BranchAddressO[ 25 ]
initial
begin
	BranchAddressO_expected[25] = 1'bX;
end 
// expected BranchAddressO[ 24 ]
initial
begin
	BranchAddressO_expected[24] = 1'bX;
end 
// expected BranchAddressO[ 23 ]
initial
begin
	BranchAddressO_expected[23] = 1'bX;
end 
// expected BranchAddressO[ 22 ]
initial
begin
	BranchAddressO_expected[22] = 1'bX;
end 
// expected BranchAddressO[ 21 ]
initial
begin
	BranchAddressO_expected[21] = 1'bX;
end 
// expected BranchAddressO[ 20 ]
initial
begin
	BranchAddressO_expected[20] = 1'bX;
end 
// expected BranchAddressO[ 19 ]
initial
begin
	BranchAddressO_expected[19] = 1'bX;
end 
// expected BranchAddressO[ 18 ]
initial
begin
	BranchAddressO_expected[18] = 1'bX;
end 
// expected BranchAddressO[ 17 ]
initial
begin
	BranchAddressO_expected[17] = 1'bX;
end 
// expected BranchAddressO[ 16 ]
initial
begin
	BranchAddressO_expected[16] = 1'bX;
end 
// expected BranchAddressO[ 15 ]
initial
begin
	BranchAddressO_expected[15] = 1'bX;
end 
// expected BranchAddressO[ 14 ]
initial
begin
	BranchAddressO_expected[14] = 1'bX;
end 
// expected BranchAddressO[ 13 ]
initial
begin
	BranchAddressO_expected[13] = 1'bX;
end 
// expected BranchAddressO[ 12 ]
initial
begin
	BranchAddressO_expected[12] = 1'bX;
end 
// expected BranchAddressO[ 11 ]
initial
begin
	BranchAddressO_expected[11] = 1'bX;
end 
// expected BranchAddressO[ 10 ]
initial
begin
	BranchAddressO_expected[10] = 1'bX;
end 
// expected BranchAddressO[ 9 ]
initial
begin
	BranchAddressO_expected[9] = 1'bX;
end 
// expected BranchAddressO[ 8 ]
initial
begin
	BranchAddressO_expected[8] = 1'bX;
end 
// expected BranchAddressO[ 7 ]
initial
begin
	BranchAddressO_expected[7] = 1'bX;
end 
// expected BranchAddressO[ 6 ]
initial
begin
	BranchAddressO_expected[6] = 1'bX;
end 
// expected BranchAddressO[ 5 ]
initial
begin
	BranchAddressO_expected[5] = 1'bX;
end 
// expected BranchAddressO[ 4 ]
initial
begin
	BranchAddressO_expected[4] = 1'bX;
end 
// expected BranchAddressO[ 3 ]
initial
begin
	BranchAddressO_expected[3] = 1'bX;
end 
// expected BranchAddressO[ 2 ]
initial
begin
	BranchAddressO_expected[2] = 1'bX;
end 
// expected BranchAddressO[ 1 ]
initial
begin
	BranchAddressO_expected[1] = 1'bX;
end 
// expected BranchAddressO[ 0 ]
initial
begin
	BranchAddressO_expected[0] = 1'bX;
end 
// expected BranchMuxO[ 31 ]
initial
begin
	BranchMuxO_expected[31] = 1'bX;
end 
// expected BranchMuxO[ 30 ]
initial
begin
	BranchMuxO_expected[30] = 1'bX;
end 
// expected BranchMuxO[ 29 ]
initial
begin
	BranchMuxO_expected[29] = 1'bX;
end 
// expected BranchMuxO[ 28 ]
initial
begin
	BranchMuxO_expected[28] = 1'bX;
end 
// expected BranchMuxO[ 27 ]
initial
begin
	BranchMuxO_expected[27] = 1'bX;
end 
// expected BranchMuxO[ 26 ]
initial
begin
	BranchMuxO_expected[26] = 1'bX;
end 
// expected BranchMuxO[ 25 ]
initial
begin
	BranchMuxO_expected[25] = 1'bX;
end 
// expected BranchMuxO[ 24 ]
initial
begin
	BranchMuxO_expected[24] = 1'bX;
end 
// expected BranchMuxO[ 23 ]
initial
begin
	BranchMuxO_expected[23] = 1'bX;
end 
// expected BranchMuxO[ 22 ]
initial
begin
	BranchMuxO_expected[22] = 1'bX;
end 
// expected BranchMuxO[ 21 ]
initial
begin
	BranchMuxO_expected[21] = 1'bX;
end 
// expected BranchMuxO[ 20 ]
initial
begin
	BranchMuxO_expected[20] = 1'bX;
end 
// expected BranchMuxO[ 19 ]
initial
begin
	BranchMuxO_expected[19] = 1'bX;
end 
// expected BranchMuxO[ 18 ]
initial
begin
	BranchMuxO_expected[18] = 1'bX;
end 
// expected BranchMuxO[ 17 ]
initial
begin
	BranchMuxO_expected[17] = 1'bX;
end 
// expected BranchMuxO[ 16 ]
initial
begin
	BranchMuxO_expected[16] = 1'bX;
end 
// expected BranchMuxO[ 15 ]
initial
begin
	BranchMuxO_expected[15] = 1'bX;
end 
// expected BranchMuxO[ 14 ]
initial
begin
	BranchMuxO_expected[14] = 1'bX;
end 
// expected BranchMuxO[ 13 ]
initial
begin
	BranchMuxO_expected[13] = 1'bX;
end 
// expected BranchMuxO[ 12 ]
initial
begin
	BranchMuxO_expected[12] = 1'bX;
end 
// expected BranchMuxO[ 11 ]
initial
begin
	BranchMuxO_expected[11] = 1'bX;
end 
// expected BranchMuxO[ 10 ]
initial
begin
	BranchMuxO_expected[10] = 1'bX;
end 
// expected BranchMuxO[ 9 ]
initial
begin
	BranchMuxO_expected[9] = 1'bX;
end 
// expected BranchMuxO[ 8 ]
initial
begin
	BranchMuxO_expected[8] = 1'bX;
end 
// expected BranchMuxO[ 7 ]
initial
begin
	BranchMuxO_expected[7] = 1'bX;
end 
// expected BranchMuxO[ 6 ]
initial
begin
	BranchMuxO_expected[6] = 1'bX;
end 
// expected BranchMuxO[ 5 ]
initial
begin
	BranchMuxO_expected[5] = 1'bX;
end 
// expected BranchMuxO[ 4 ]
initial
begin
	BranchMuxO_expected[4] = 1'bX;
end 
// expected BranchMuxO[ 3 ]
initial
begin
	BranchMuxO_expected[3] = 1'bX;
end 
// expected BranchMuxO[ 2 ]
initial
begin
	BranchMuxO_expected[2] = 1'bX;
end 
// expected BranchMuxO[ 1 ]
initial
begin
	BranchMuxO_expected[1] = 1'bX;
end 
// expected BranchMuxO[ 0 ]
initial
begin
	BranchMuxO_expected[0] = 1'bX;
end 
// expected BranchOffsetO[ 31 ]
initial
begin
	BranchOffsetO_expected[31] = 1'bX;
end 
// expected BranchOffsetO[ 30 ]
initial
begin
	BranchOffsetO_expected[30] = 1'bX;
end 
// expected BranchOffsetO[ 29 ]
initial
begin
	BranchOffsetO_expected[29] = 1'bX;
end 
// expected BranchOffsetO[ 28 ]
initial
begin
	BranchOffsetO_expected[28] = 1'bX;
end 
// expected BranchOffsetO[ 27 ]
initial
begin
	BranchOffsetO_expected[27] = 1'bX;
end 
// expected BranchOffsetO[ 26 ]
initial
begin
	BranchOffsetO_expected[26] = 1'bX;
end 
// expected BranchOffsetO[ 25 ]
initial
begin
	BranchOffsetO_expected[25] = 1'bX;
end 
// expected BranchOffsetO[ 24 ]
initial
begin
	BranchOffsetO_expected[24] = 1'bX;
end 
// expected BranchOffsetO[ 23 ]
initial
begin
	BranchOffsetO_expected[23] = 1'bX;
end 
// expected BranchOffsetO[ 22 ]
initial
begin
	BranchOffsetO_expected[22] = 1'bX;
end 
// expected BranchOffsetO[ 21 ]
initial
begin
	BranchOffsetO_expected[21] = 1'bX;
end 
// expected BranchOffsetO[ 20 ]
initial
begin
	BranchOffsetO_expected[20] = 1'bX;
end 
// expected BranchOffsetO[ 19 ]
initial
begin
	BranchOffsetO_expected[19] = 1'bX;
end 
// expected BranchOffsetO[ 18 ]
initial
begin
	BranchOffsetO_expected[18] = 1'bX;
end 
// expected BranchOffsetO[ 17 ]
initial
begin
	BranchOffsetO_expected[17] = 1'bX;
end 
// expected BranchOffsetO[ 16 ]
initial
begin
	BranchOffsetO_expected[16] = 1'bX;
end 
// expected BranchOffsetO[ 15 ]
initial
begin
	BranchOffsetO_expected[15] = 1'bX;
end 
// expected BranchOffsetO[ 14 ]
initial
begin
	BranchOffsetO_expected[14] = 1'bX;
end 
// expected BranchOffsetO[ 13 ]
initial
begin
	BranchOffsetO_expected[13] = 1'bX;
end 
// expected BranchOffsetO[ 12 ]
initial
begin
	BranchOffsetO_expected[12] = 1'bX;
end 
// expected BranchOffsetO[ 11 ]
initial
begin
	BranchOffsetO_expected[11] = 1'bX;
end 
// expected BranchOffsetO[ 10 ]
initial
begin
	BranchOffsetO_expected[10] = 1'bX;
end 
// expected BranchOffsetO[ 9 ]
initial
begin
	BranchOffsetO_expected[9] = 1'bX;
end 
// expected BranchOffsetO[ 8 ]
initial
begin
	BranchOffsetO_expected[8] = 1'bX;
end 
// expected BranchOffsetO[ 7 ]
initial
begin
	BranchOffsetO_expected[7] = 1'bX;
end 
// expected BranchOffsetO[ 6 ]
initial
begin
	BranchOffsetO_expected[6] = 1'bX;
end 
// expected BranchOffsetO[ 5 ]
initial
begin
	BranchOffsetO_expected[5] = 1'bX;
end 
// expected BranchOffsetO[ 4 ]
initial
begin
	BranchOffsetO_expected[4] = 1'bX;
end 
// expected BranchOffsetO[ 3 ]
initial
begin
	BranchOffsetO_expected[3] = 1'bX;
end 
// expected BranchOffsetO[ 2 ]
initial
begin
	BranchOffsetO_expected[2] = 1'bX;
end 
// expected BranchOffsetO[ 1 ]
initial
begin
	BranchOffsetO_expected[1] = 1'bX;
end 
// expected BranchOffsetO[ 0 ]
initial
begin
	BranchOffsetO_expected[0] = 1'bX;
end 

// expected BranchOut
initial
begin
	BranchOut_expected = 1'bX;
end 
// expected InstructionOut[ 31 ]
initial
begin
	InstructionOut_expected[31] = 1'bX;
end 
// expected InstructionOut[ 30 ]
initial
begin
	InstructionOut_expected[30] = 1'bX;
end 
// expected InstructionOut[ 29 ]
initial
begin
	InstructionOut_expected[29] = 1'bX;
end 
// expected InstructionOut[ 28 ]
initial
begin
	InstructionOut_expected[28] = 1'bX;
end 
// expected InstructionOut[ 27 ]
initial
begin
	InstructionOut_expected[27] = 1'bX;
end 
// expected InstructionOut[ 26 ]
initial
begin
	InstructionOut_expected[26] = 1'bX;
end 
// expected InstructionOut[ 25 ]
initial
begin
	InstructionOut_expected[25] = 1'bX;
end 
// expected InstructionOut[ 24 ]
initial
begin
	InstructionOut_expected[24] = 1'bX;
end 
// expected InstructionOut[ 23 ]
initial
begin
	InstructionOut_expected[23] = 1'bX;
end 
// expected InstructionOut[ 22 ]
initial
begin
	InstructionOut_expected[22] = 1'bX;
end 
// expected InstructionOut[ 21 ]
initial
begin
	InstructionOut_expected[21] = 1'bX;
end 
// expected InstructionOut[ 20 ]
initial
begin
	InstructionOut_expected[20] = 1'bX;
end 
// expected InstructionOut[ 19 ]
initial
begin
	InstructionOut_expected[19] = 1'bX;
end 
// expected InstructionOut[ 18 ]
initial
begin
	InstructionOut_expected[18] = 1'bX;
end 
// expected InstructionOut[ 17 ]
initial
begin
	InstructionOut_expected[17] = 1'bX;
end 
// expected InstructionOut[ 16 ]
initial
begin
	InstructionOut_expected[16] = 1'bX;
end 
// expected InstructionOut[ 15 ]
initial
begin
	InstructionOut_expected[15] = 1'bX;
end 
// expected InstructionOut[ 14 ]
initial
begin
	InstructionOut_expected[14] = 1'bX;
end 
// expected InstructionOut[ 13 ]
initial
begin
	InstructionOut_expected[13] = 1'bX;
end 
// expected InstructionOut[ 12 ]
initial
begin
	InstructionOut_expected[12] = 1'bX;
end 
// expected InstructionOut[ 11 ]
initial
begin
	InstructionOut_expected[11] = 1'bX;
end 
// expected InstructionOut[ 10 ]
initial
begin
	InstructionOut_expected[10] = 1'bX;
end 
// expected InstructionOut[ 9 ]
initial
begin
	InstructionOut_expected[9] = 1'bX;
end 
// expected InstructionOut[ 8 ]
initial
begin
	InstructionOut_expected[8] = 1'bX;
end 
// expected InstructionOut[ 7 ]
initial
begin
	InstructionOut_expected[7] = 1'bX;
end 
// expected InstructionOut[ 6 ]
initial
begin
	InstructionOut_expected[6] = 1'bX;
end 
// expected InstructionOut[ 5 ]
initial
begin
	InstructionOut_expected[5] = 1'bX;
end 
// expected InstructionOut[ 4 ]
initial
begin
	InstructionOut_expected[4] = 1'bX;
end 
// expected InstructionOut[ 3 ]
initial
begin
	InstructionOut_expected[3] = 1'bX;
end 
// expected InstructionOut[ 2 ]
initial
begin
	InstructionOut_expected[2] = 1'bX;
end 
// expected InstructionOut[ 1 ]
initial
begin
	InstructionOut_expected[1] = 1'bX;
end 
// expected InstructionOut[ 0 ]
initial
begin
	InstructionOut_expected[0] = 1'bX;
end 
// expected JumpAddressO[ 31 ]
initial
begin
	JumpAddressO_expected[31] = 1'bX;
end 
// expected JumpAddressO[ 30 ]
initial
begin
	JumpAddressO_expected[30] = 1'bX;
end 
// expected JumpAddressO[ 29 ]
initial
begin
	JumpAddressO_expected[29] = 1'bX;
end 
// expected JumpAddressO[ 28 ]
initial
begin
	JumpAddressO_expected[28] = 1'bX;
end 
// expected JumpAddressO[ 27 ]
initial
begin
	JumpAddressO_expected[27] = 1'bX;
end 
// expected JumpAddressO[ 26 ]
initial
begin
	JumpAddressO_expected[26] = 1'bX;
end 
// expected JumpAddressO[ 25 ]
initial
begin
	JumpAddressO_expected[25] = 1'bX;
end 
// expected JumpAddressO[ 24 ]
initial
begin
	JumpAddressO_expected[24] = 1'bX;
end 
// expected JumpAddressO[ 23 ]
initial
begin
	JumpAddressO_expected[23] = 1'bX;
end 
// expected JumpAddressO[ 22 ]
initial
begin
	JumpAddressO_expected[22] = 1'bX;
end 
// expected JumpAddressO[ 21 ]
initial
begin
	JumpAddressO_expected[21] = 1'bX;
end 
// expected JumpAddressO[ 20 ]
initial
begin
	JumpAddressO_expected[20] = 1'bX;
end 
// expected JumpAddressO[ 19 ]
initial
begin
	JumpAddressO_expected[19] = 1'bX;
end 
// expected JumpAddressO[ 18 ]
initial
begin
	JumpAddressO_expected[18] = 1'bX;
end 
// expected JumpAddressO[ 17 ]
initial
begin
	JumpAddressO_expected[17] = 1'bX;
end 
// expected JumpAddressO[ 16 ]
initial
begin
	JumpAddressO_expected[16] = 1'bX;
end 
// expected JumpAddressO[ 15 ]
initial
begin
	JumpAddressO_expected[15] = 1'bX;
end 
// expected JumpAddressO[ 14 ]
initial
begin
	JumpAddressO_expected[14] = 1'bX;
end 
// expected JumpAddressO[ 13 ]
initial
begin
	JumpAddressO_expected[13] = 1'bX;
end 
// expected JumpAddressO[ 12 ]
initial
begin
	JumpAddressO_expected[12] = 1'bX;
end 
// expected JumpAddressO[ 11 ]
initial
begin
	JumpAddressO_expected[11] = 1'bX;
end 
// expected JumpAddressO[ 10 ]
initial
begin
	JumpAddressO_expected[10] = 1'bX;
end 
// expected JumpAddressO[ 9 ]
initial
begin
	JumpAddressO_expected[9] = 1'bX;
end 
// expected JumpAddressO[ 8 ]
initial
begin
	JumpAddressO_expected[8] = 1'bX;
end 
// expected JumpAddressO[ 7 ]
initial
begin
	JumpAddressO_expected[7] = 1'bX;
end 
// expected JumpAddressO[ 6 ]
initial
begin
	JumpAddressO_expected[6] = 1'bX;
end 
// expected JumpAddressO[ 5 ]
initial
begin
	JumpAddressO_expected[5] = 1'bX;
end 
// expected JumpAddressO[ 4 ]
initial
begin
	JumpAddressO_expected[4] = 1'bX;
end 
// expected JumpAddressO[ 3 ]
initial
begin
	JumpAddressO_expected[3] = 1'bX;
end 
// expected JumpAddressO[ 2 ]
initial
begin
	JumpAddressO_expected[2] = 1'bX;
end 
// expected JumpAddressO[ 1 ]
initial
begin
	JumpAddressO_expected[1] = 1'bX;
end 
// expected JumpAddressO[ 0 ]
initial
begin
	JumpAddressO_expected[0] = 1'bX;
end 

// expected JumpO
initial
begin
	JumpO_expected = 1'bX;
end 

// expected MemWriteOut
initial
begin
	MemWriteOut_expected = 1'bX;
end 
// expected MuxOut[ 7 ]
initial
begin
	MuxOut_expected[7] = 1'bX;
end 
// expected MuxOut[ 6 ]
initial
begin
	MuxOut_expected[6] = 1'bX;
end 
// expected MuxOut[ 5 ]
initial
begin
	MuxOut_expected[5] = 1'bX;
end 
// expected MuxOut[ 4 ]
initial
begin
	MuxOut_expected[4] = 1'bX;
end 
// expected MuxOut[ 3 ]
initial
begin
	MuxOut_expected[3] = 1'bX;
end 
// expected MuxOut[ 2 ]
initial
begin
	MuxOut_expected[2] = 1'bX;
end 
// expected MuxOut[ 1 ]
initial
begin
	MuxOut_expected[1] = 1'bX;
end 
// expected MuxOut[ 0 ]
initial
begin
	MuxOut_expected[0] = 1'bX;
end 
// expected PC4AddedO[ 31 ]
initial
begin
	PC4AddedO_expected[31] = 1'bX;
end 
// expected PC4AddedO[ 30 ]
initial
begin
	PC4AddedO_expected[30] = 1'bX;
end 
// expected PC4AddedO[ 29 ]
initial
begin
	PC4AddedO_expected[29] = 1'bX;
end 
// expected PC4AddedO[ 28 ]
initial
begin
	PC4AddedO_expected[28] = 1'bX;
end 
// expected PC4AddedO[ 27 ]
initial
begin
	PC4AddedO_expected[27] = 1'bX;
end 
// expected PC4AddedO[ 26 ]
initial
begin
	PC4AddedO_expected[26] = 1'bX;
end 
// expected PC4AddedO[ 25 ]
initial
begin
	PC4AddedO_expected[25] = 1'bX;
end 
// expected PC4AddedO[ 24 ]
initial
begin
	PC4AddedO_expected[24] = 1'bX;
end 
// expected PC4AddedO[ 23 ]
initial
begin
	PC4AddedO_expected[23] = 1'bX;
end 
// expected PC4AddedO[ 22 ]
initial
begin
	PC4AddedO_expected[22] = 1'bX;
end 
// expected PC4AddedO[ 21 ]
initial
begin
	PC4AddedO_expected[21] = 1'bX;
end 
// expected PC4AddedO[ 20 ]
initial
begin
	PC4AddedO_expected[20] = 1'bX;
end 
// expected PC4AddedO[ 19 ]
initial
begin
	PC4AddedO_expected[19] = 1'bX;
end 
// expected PC4AddedO[ 18 ]
initial
begin
	PC4AddedO_expected[18] = 1'bX;
end 
// expected PC4AddedO[ 17 ]
initial
begin
	PC4AddedO_expected[17] = 1'bX;
end 
// expected PC4AddedO[ 16 ]
initial
begin
	PC4AddedO_expected[16] = 1'bX;
end 
// expected PC4AddedO[ 15 ]
initial
begin
	PC4AddedO_expected[15] = 1'bX;
end 
// expected PC4AddedO[ 14 ]
initial
begin
	PC4AddedO_expected[14] = 1'bX;
end 
// expected PC4AddedO[ 13 ]
initial
begin
	PC4AddedO_expected[13] = 1'bX;
end 
// expected PC4AddedO[ 12 ]
initial
begin
	PC4AddedO_expected[12] = 1'bX;
end 
// expected PC4AddedO[ 11 ]
initial
begin
	PC4AddedO_expected[11] = 1'bX;
end 
// expected PC4AddedO[ 10 ]
initial
begin
	PC4AddedO_expected[10] = 1'bX;
end 
// expected PC4AddedO[ 9 ]
initial
begin
	PC4AddedO_expected[9] = 1'bX;
end 
// expected PC4AddedO[ 8 ]
initial
begin
	PC4AddedO_expected[8] = 1'bX;
end 
// expected PC4AddedO[ 7 ]
initial
begin
	PC4AddedO_expected[7] = 1'bX;
end 
// expected PC4AddedO[ 6 ]
initial
begin
	PC4AddedO_expected[6] = 1'bX;
end 
// expected PC4AddedO[ 5 ]
initial
begin
	PC4AddedO_expected[5] = 1'bX;
end 
// expected PC4AddedO[ 4 ]
initial
begin
	PC4AddedO_expected[4] = 1'bX;
end 
// expected PC4AddedO[ 3 ]
initial
begin
	PC4AddedO_expected[3] = 1'bX;
end 
// expected PC4AddedO[ 2 ]
initial
begin
	PC4AddedO_expected[2] = 1'bX;
end 
// expected PC4AddedO[ 1 ]
initial
begin
	PC4AddedO_expected[1] = 1'bX;
end 
// expected PC4AddedO[ 0 ]
initial
begin
	PC4AddedO_expected[0] = 1'bX;
end 
// expected PCin[ 31 ]
initial
begin
	PCin_expected[31] = 1'bX;
end 
// expected PCin[ 30 ]
initial
begin
	PCin_expected[30] = 1'bX;
end 
// expected PCin[ 29 ]
initial
begin
	PCin_expected[29] = 1'bX;
end 
// expected PCin[ 28 ]
initial
begin
	PCin_expected[28] = 1'bX;
end 
// expected PCin[ 27 ]
initial
begin
	PCin_expected[27] = 1'bX;
end 
// expected PCin[ 26 ]
initial
begin
	PCin_expected[26] = 1'bX;
end 
// expected PCin[ 25 ]
initial
begin
	PCin_expected[25] = 1'bX;
end 
// expected PCin[ 24 ]
initial
begin
	PCin_expected[24] = 1'bX;
end 
// expected PCin[ 23 ]
initial
begin
	PCin_expected[23] = 1'bX;
end 
// expected PCin[ 22 ]
initial
begin
	PCin_expected[22] = 1'bX;
end 
// expected PCin[ 21 ]
initial
begin
	PCin_expected[21] = 1'bX;
end 
// expected PCin[ 20 ]
initial
begin
	PCin_expected[20] = 1'bX;
end 
// expected PCin[ 19 ]
initial
begin
	PCin_expected[19] = 1'bX;
end 
// expected PCin[ 18 ]
initial
begin
	PCin_expected[18] = 1'bX;
end 
// expected PCin[ 17 ]
initial
begin
	PCin_expected[17] = 1'bX;
end 
// expected PCin[ 16 ]
initial
begin
	PCin_expected[16] = 1'bX;
end 
// expected PCin[ 15 ]
initial
begin
	PCin_expected[15] = 1'bX;
end 
// expected PCin[ 14 ]
initial
begin
	PCin_expected[14] = 1'bX;
end 
// expected PCin[ 13 ]
initial
begin
	PCin_expected[13] = 1'bX;
end 
// expected PCin[ 12 ]
initial
begin
	PCin_expected[12] = 1'bX;
end 
// expected PCin[ 11 ]
initial
begin
	PCin_expected[11] = 1'bX;
end 
// expected PCin[ 10 ]
initial
begin
	PCin_expected[10] = 1'bX;
end 
// expected PCin[ 9 ]
initial
begin
	PCin_expected[9] = 1'bX;
end 
// expected PCin[ 8 ]
initial
begin
	PCin_expected[8] = 1'bX;
end 
// expected PCin[ 7 ]
initial
begin
	PCin_expected[7] = 1'bX;
end 
// expected PCin[ 6 ]
initial
begin
	PCin_expected[6] = 1'bX;
end 
// expected PCin[ 5 ]
initial
begin
	PCin_expected[5] = 1'bX;
end 
// expected PCin[ 4 ]
initial
begin
	PCin_expected[4] = 1'bX;
end 
// expected PCin[ 3 ]
initial
begin
	PCin_expected[3] = 1'bX;
end 
// expected PCin[ 2 ]
initial
begin
	PCin_expected[2] = 1'bX;
end 
// expected PCin[ 1 ]
initial
begin
	PCin_expected[1] = 1'bX;
end 
// expected PCin[ 0 ]
initial
begin
	PCin_expected[0] = 1'bX;
end 
// expected PCOut[ 31 ]
initial
begin
	PCOut_expected[31] = 1'bX;
end 
// expected PCOut[ 30 ]
initial
begin
	PCOut_expected[30] = 1'bX;
end 
// expected PCOut[ 29 ]
initial
begin
	PCOut_expected[29] = 1'bX;
end 
// expected PCOut[ 28 ]
initial
begin
	PCOut_expected[28] = 1'bX;
end 
// expected PCOut[ 27 ]
initial
begin
	PCOut_expected[27] = 1'bX;
end 
// expected PCOut[ 26 ]
initial
begin
	PCOut_expected[26] = 1'bX;
end 
// expected PCOut[ 25 ]
initial
begin
	PCOut_expected[25] = 1'bX;
end 
// expected PCOut[ 24 ]
initial
begin
	PCOut_expected[24] = 1'bX;
end 
// expected PCOut[ 23 ]
initial
begin
	PCOut_expected[23] = 1'bX;
end 
// expected PCOut[ 22 ]
initial
begin
	PCOut_expected[22] = 1'bX;
end 
// expected PCOut[ 21 ]
initial
begin
	PCOut_expected[21] = 1'bX;
end 
// expected PCOut[ 20 ]
initial
begin
	PCOut_expected[20] = 1'bX;
end 
// expected PCOut[ 19 ]
initial
begin
	PCOut_expected[19] = 1'bX;
end 
// expected PCOut[ 18 ]
initial
begin
	PCOut_expected[18] = 1'bX;
end 
// expected PCOut[ 17 ]
initial
begin
	PCOut_expected[17] = 1'bX;
end 
// expected PCOut[ 16 ]
initial
begin
	PCOut_expected[16] = 1'bX;
end 
// expected PCOut[ 15 ]
initial
begin
	PCOut_expected[15] = 1'bX;
end 
// expected PCOut[ 14 ]
initial
begin
	PCOut_expected[14] = 1'bX;
end 
// expected PCOut[ 13 ]
initial
begin
	PCOut_expected[13] = 1'bX;
end 
// expected PCOut[ 12 ]
initial
begin
	PCOut_expected[12] = 1'bX;
end 
// expected PCOut[ 11 ]
initial
begin
	PCOut_expected[11] = 1'bX;
end 
// expected PCOut[ 10 ]
initial
begin
	PCOut_expected[10] = 1'bX;
end 
// expected PCOut[ 9 ]
initial
begin
	PCOut_expected[9] = 1'bX;
end 
// expected PCOut[ 8 ]
initial
begin
	PCOut_expected[8] = 1'bX;
end 
// expected PCOut[ 7 ]
initial
begin
	PCOut_expected[7] = 1'bX;
end 
// expected PCOut[ 6 ]
initial
begin
	PCOut_expected[6] = 1'bX;
end 
// expected PCOut[ 5 ]
initial
begin
	PCOut_expected[5] = 1'bX;
end 
// expected PCOut[ 4 ]
initial
begin
	PCOut_expected[4] = 1'bX;
end 
// expected PCOut[ 3 ]
initial
begin
	PCOut_expected[3] = 1'bX;
end 
// expected PCOut[ 2 ]
initial
begin
	PCOut_expected[2] = 1'bX;
end 
// expected PCOut[ 1 ]
initial
begin
	PCOut_expected[1] = 1'bX;
end 
// expected PCOut[ 0 ]
initial
begin
	PCOut_expected[0] = 1'bX;
end 
// expected ReadReg1O[ 4 ]
initial
begin
	ReadReg1O_expected[4] = 1'bX;
end 
// expected ReadReg1O[ 3 ]
initial
begin
	ReadReg1O_expected[3] = 1'bX;
end 
// expected ReadReg1O[ 2 ]
initial
begin
	ReadReg1O_expected[2] = 1'bX;
end 
// expected ReadReg1O[ 1 ]
initial
begin
	ReadReg1O_expected[1] = 1'bX;
end 
// expected ReadReg1O[ 0 ]
initial
begin
	ReadReg1O_expected[0] = 1'bX;
end 
// expected ReadReg2O[ 4 ]
initial
begin
	ReadReg2O_expected[4] = 1'bX;
end 
// expected ReadReg2O[ 3 ]
initial
begin
	ReadReg2O_expected[3] = 1'bX;
end 
// expected ReadReg2O[ 2 ]
initial
begin
	ReadReg2O_expected[2] = 1'bX;
end 
// expected ReadReg2O[ 1 ]
initial
begin
	ReadReg2O_expected[1] = 1'bX;
end 
// expected ReadReg2O[ 0 ]
initial
begin
	ReadReg2O_expected[0] = 1'bX;
end 

// expected RegWriteOut
initial
begin
	RegWriteOut_expected = 1'bX;
end 
// expected WriteRegO[ 4 ]
initial
begin
	WriteRegO_expected[4] = 1'bX;
end 
// expected WriteRegO[ 3 ]
initial
begin
	WriteRegO_expected[3] = 1'bX;
end 
// expected WriteRegO[ 2 ]
initial
begin
	WriteRegO_expected[2] = 1'bX;
end 
// expected WriteRegO[ 1 ]
initial
begin
	WriteRegO_expected[1] = 1'bX;
end 
// expected WriteRegO[ 0 ]
initial
begin
	WriteRegO_expected[0] = 1'bX;
end 

// expected ZeroOut
initial
begin
	ZeroOut_expected = 1'bX;
end 
// generate trigger
always @(BranchAddressO_expected or BranchAddressO or BranchMuxO_expected or BranchMuxO or BranchOffsetO_expected or BranchOffsetO or BranchOut_expected or BranchOut or InstructionOut_expected or InstructionOut or JumpAddressO_expected or JumpAddressO or JumpO_expected or JumpO or MemWriteOut_expected or MemWriteOut or MuxOut_expected or MuxOut or PC4AddedO_expected or PC4AddedO or PCin_expected or PCin or PCOut_expected or PCOut or ReadReg1O_expected or ReadReg1O or ReadReg2O_expected or ReadReg2O or RegWriteOut_expected or RegWriteOut or WriteRegO_expected or WriteRegO or ZeroOut_expected or ZeroOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BranchAddressO = %b | expected BranchMuxO = %b | expected BranchOffsetO = %b | expected BranchOut = %b | expected InstructionOut = %b | expected JumpAddressO = %b | expected JumpO = %b | expected MemWriteOut = %b | expected MuxOut = %b | expected PC4AddedO = %b | expected PCin = %b | expected PCOut = %b | expected ReadReg1O = %b | expected ReadReg2O = %b | expected RegWriteOut = %b | expected WriteRegO = %b | expected ZeroOut = %b | ",BranchAddressO_expected_prev,BranchMuxO_expected_prev,BranchOffsetO_expected_prev,BranchOut_expected_prev,InstructionOut_expected_prev,JumpAddressO_expected_prev,JumpO_expected_prev,MemWriteOut_expected_prev,MuxOut_expected_prev,PC4AddedO_expected_prev,PCin_expected_prev,PCOut_expected_prev,ReadReg1O_expected_prev,ReadReg2O_expected_prev,RegWriteOut_expected_prev,WriteRegO_expected_prev,ZeroOut_expected_prev);
	$display("| real BranchAddressO = %b | real BranchMuxO = %b | real BranchOffsetO = %b | real BranchOut = %b | real InstructionOut = %b | real JumpAddressO = %b | real JumpO = %b | real MemWriteOut = %b | real MuxOut = %b | real PC4AddedO = %b | real PCin = %b | real PCOut = %b | real ReadReg1O = %b | real ReadReg2O = %b | real RegWriteOut = %b | real WriteRegO = %b | real ZeroOut = %b | ",BranchAddressO_prev,BranchMuxO_prev,BranchOffsetO_prev,BranchOut_prev,InstructionOut_prev,JumpAddressO_prev,JumpO_prev,MemWriteOut_prev,MuxOut_prev,PC4AddedO_prev,PCin_prev,PCOut_prev,ReadReg1O_prev,ReadReg2O_prev,RegWriteOut_prev,WriteRegO_prev,ZeroOut_prev);
`endif
	if (
		( BranchAddressO_expected_prev[0] !== 1'bx ) && ( BranchAddressO_prev[0] !== BranchAddressO_expected_prev[0] )
		&& ((BranchAddressO_expected_prev[0] !== last_BranchAddressO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[0] = BranchAddressO_expected_prev[0];
	end
	if (
		( BranchAddressO_expected_prev[1] !== 1'bx ) && ( BranchAddressO_prev[1] !== BranchAddressO_expected_prev[1] )
		&& ((BranchAddressO_expected_prev[1] !== last_BranchAddressO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[1] = BranchAddressO_expected_prev[1];
	end
	if (
		( BranchAddressO_expected_prev[2] !== 1'bx ) && ( BranchAddressO_prev[2] !== BranchAddressO_expected_prev[2] )
		&& ((BranchAddressO_expected_prev[2] !== last_BranchAddressO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[2] = BranchAddressO_expected_prev[2];
	end
	if (
		( BranchAddressO_expected_prev[3] !== 1'bx ) && ( BranchAddressO_prev[3] !== BranchAddressO_expected_prev[3] )
		&& ((BranchAddressO_expected_prev[3] !== last_BranchAddressO_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[3] = BranchAddressO_expected_prev[3];
	end
	if (
		( BranchAddressO_expected_prev[4] !== 1'bx ) && ( BranchAddressO_prev[4] !== BranchAddressO_expected_prev[4] )
		&& ((BranchAddressO_expected_prev[4] !== last_BranchAddressO_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[4] = BranchAddressO_expected_prev[4];
	end
	if (
		( BranchAddressO_expected_prev[5] !== 1'bx ) && ( BranchAddressO_prev[5] !== BranchAddressO_expected_prev[5] )
		&& ((BranchAddressO_expected_prev[5] !== last_BranchAddressO_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[5] = BranchAddressO_expected_prev[5];
	end
	if (
		( BranchAddressO_expected_prev[6] !== 1'bx ) && ( BranchAddressO_prev[6] !== BranchAddressO_expected_prev[6] )
		&& ((BranchAddressO_expected_prev[6] !== last_BranchAddressO_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[6] = BranchAddressO_expected_prev[6];
	end
	if (
		( BranchAddressO_expected_prev[7] !== 1'bx ) && ( BranchAddressO_prev[7] !== BranchAddressO_expected_prev[7] )
		&& ((BranchAddressO_expected_prev[7] !== last_BranchAddressO_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[7] = BranchAddressO_expected_prev[7];
	end
	if (
		( BranchAddressO_expected_prev[8] !== 1'bx ) && ( BranchAddressO_prev[8] !== BranchAddressO_expected_prev[8] )
		&& ((BranchAddressO_expected_prev[8] !== last_BranchAddressO_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[8] = BranchAddressO_expected_prev[8];
	end
	if (
		( BranchAddressO_expected_prev[9] !== 1'bx ) && ( BranchAddressO_prev[9] !== BranchAddressO_expected_prev[9] )
		&& ((BranchAddressO_expected_prev[9] !== last_BranchAddressO_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[9] = BranchAddressO_expected_prev[9];
	end
	if (
		( BranchAddressO_expected_prev[10] !== 1'bx ) && ( BranchAddressO_prev[10] !== BranchAddressO_expected_prev[10] )
		&& ((BranchAddressO_expected_prev[10] !== last_BranchAddressO_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[10] = BranchAddressO_expected_prev[10];
	end
	if (
		( BranchAddressO_expected_prev[11] !== 1'bx ) && ( BranchAddressO_prev[11] !== BranchAddressO_expected_prev[11] )
		&& ((BranchAddressO_expected_prev[11] !== last_BranchAddressO_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[11] = BranchAddressO_expected_prev[11];
	end
	if (
		( BranchAddressO_expected_prev[12] !== 1'bx ) && ( BranchAddressO_prev[12] !== BranchAddressO_expected_prev[12] )
		&& ((BranchAddressO_expected_prev[12] !== last_BranchAddressO_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[12] = BranchAddressO_expected_prev[12];
	end
	if (
		( BranchAddressO_expected_prev[13] !== 1'bx ) && ( BranchAddressO_prev[13] !== BranchAddressO_expected_prev[13] )
		&& ((BranchAddressO_expected_prev[13] !== last_BranchAddressO_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[13] = BranchAddressO_expected_prev[13];
	end
	if (
		( BranchAddressO_expected_prev[14] !== 1'bx ) && ( BranchAddressO_prev[14] !== BranchAddressO_expected_prev[14] )
		&& ((BranchAddressO_expected_prev[14] !== last_BranchAddressO_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[14] = BranchAddressO_expected_prev[14];
	end
	if (
		( BranchAddressO_expected_prev[15] !== 1'bx ) && ( BranchAddressO_prev[15] !== BranchAddressO_expected_prev[15] )
		&& ((BranchAddressO_expected_prev[15] !== last_BranchAddressO_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[15] = BranchAddressO_expected_prev[15];
	end
	if (
		( BranchAddressO_expected_prev[16] !== 1'bx ) && ( BranchAddressO_prev[16] !== BranchAddressO_expected_prev[16] )
		&& ((BranchAddressO_expected_prev[16] !== last_BranchAddressO_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[16] = BranchAddressO_expected_prev[16];
	end
	if (
		( BranchAddressO_expected_prev[17] !== 1'bx ) && ( BranchAddressO_prev[17] !== BranchAddressO_expected_prev[17] )
		&& ((BranchAddressO_expected_prev[17] !== last_BranchAddressO_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[17] = BranchAddressO_expected_prev[17];
	end
	if (
		( BranchAddressO_expected_prev[18] !== 1'bx ) && ( BranchAddressO_prev[18] !== BranchAddressO_expected_prev[18] )
		&& ((BranchAddressO_expected_prev[18] !== last_BranchAddressO_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[18] = BranchAddressO_expected_prev[18];
	end
	if (
		( BranchAddressO_expected_prev[19] !== 1'bx ) && ( BranchAddressO_prev[19] !== BranchAddressO_expected_prev[19] )
		&& ((BranchAddressO_expected_prev[19] !== last_BranchAddressO_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[19] = BranchAddressO_expected_prev[19];
	end
	if (
		( BranchAddressO_expected_prev[20] !== 1'bx ) && ( BranchAddressO_prev[20] !== BranchAddressO_expected_prev[20] )
		&& ((BranchAddressO_expected_prev[20] !== last_BranchAddressO_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[20] = BranchAddressO_expected_prev[20];
	end
	if (
		( BranchAddressO_expected_prev[21] !== 1'bx ) && ( BranchAddressO_prev[21] !== BranchAddressO_expected_prev[21] )
		&& ((BranchAddressO_expected_prev[21] !== last_BranchAddressO_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[21] = BranchAddressO_expected_prev[21];
	end
	if (
		( BranchAddressO_expected_prev[22] !== 1'bx ) && ( BranchAddressO_prev[22] !== BranchAddressO_expected_prev[22] )
		&& ((BranchAddressO_expected_prev[22] !== last_BranchAddressO_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[22] = BranchAddressO_expected_prev[22];
	end
	if (
		( BranchAddressO_expected_prev[23] !== 1'bx ) && ( BranchAddressO_prev[23] !== BranchAddressO_expected_prev[23] )
		&& ((BranchAddressO_expected_prev[23] !== last_BranchAddressO_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[23] = BranchAddressO_expected_prev[23];
	end
	if (
		( BranchAddressO_expected_prev[24] !== 1'bx ) && ( BranchAddressO_prev[24] !== BranchAddressO_expected_prev[24] )
		&& ((BranchAddressO_expected_prev[24] !== last_BranchAddressO_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[24] = BranchAddressO_expected_prev[24];
	end
	if (
		( BranchAddressO_expected_prev[25] !== 1'bx ) && ( BranchAddressO_prev[25] !== BranchAddressO_expected_prev[25] )
		&& ((BranchAddressO_expected_prev[25] !== last_BranchAddressO_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[25] = BranchAddressO_expected_prev[25];
	end
	if (
		( BranchAddressO_expected_prev[26] !== 1'bx ) && ( BranchAddressO_prev[26] !== BranchAddressO_expected_prev[26] )
		&& ((BranchAddressO_expected_prev[26] !== last_BranchAddressO_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[26] = BranchAddressO_expected_prev[26];
	end
	if (
		( BranchAddressO_expected_prev[27] !== 1'bx ) && ( BranchAddressO_prev[27] !== BranchAddressO_expected_prev[27] )
		&& ((BranchAddressO_expected_prev[27] !== last_BranchAddressO_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[27] = BranchAddressO_expected_prev[27];
	end
	if (
		( BranchAddressO_expected_prev[28] !== 1'bx ) && ( BranchAddressO_prev[28] !== BranchAddressO_expected_prev[28] )
		&& ((BranchAddressO_expected_prev[28] !== last_BranchAddressO_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[28] = BranchAddressO_expected_prev[28];
	end
	if (
		( BranchAddressO_expected_prev[29] !== 1'bx ) && ( BranchAddressO_prev[29] !== BranchAddressO_expected_prev[29] )
		&& ((BranchAddressO_expected_prev[29] !== last_BranchAddressO_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[29] = BranchAddressO_expected_prev[29];
	end
	if (
		( BranchAddressO_expected_prev[30] !== 1'bx ) && ( BranchAddressO_prev[30] !== BranchAddressO_expected_prev[30] )
		&& ((BranchAddressO_expected_prev[30] !== last_BranchAddressO_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[30] = BranchAddressO_expected_prev[30];
	end
	if (
		( BranchAddressO_expected_prev[31] !== 1'bx ) && ( BranchAddressO_prev[31] !== BranchAddressO_expected_prev[31] )
		&& ((BranchAddressO_expected_prev[31] !== last_BranchAddressO_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchAddressO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchAddressO_expected_prev);
		$display ("     Real value = %b", BranchAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchAddressO_exp[31] = BranchAddressO_expected_prev[31];
	end
	if (
		( BranchMuxO_expected_prev[0] !== 1'bx ) && ( BranchMuxO_prev[0] !== BranchMuxO_expected_prev[0] )
		&& ((BranchMuxO_expected_prev[0] !== last_BranchMuxO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[0] = BranchMuxO_expected_prev[0];
	end
	if (
		( BranchMuxO_expected_prev[1] !== 1'bx ) && ( BranchMuxO_prev[1] !== BranchMuxO_expected_prev[1] )
		&& ((BranchMuxO_expected_prev[1] !== last_BranchMuxO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[1] = BranchMuxO_expected_prev[1];
	end
	if (
		( BranchMuxO_expected_prev[2] !== 1'bx ) && ( BranchMuxO_prev[2] !== BranchMuxO_expected_prev[2] )
		&& ((BranchMuxO_expected_prev[2] !== last_BranchMuxO_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[2] = BranchMuxO_expected_prev[2];
	end
	if (
		( BranchMuxO_expected_prev[3] !== 1'bx ) && ( BranchMuxO_prev[3] !== BranchMuxO_expected_prev[3] )
		&& ((BranchMuxO_expected_prev[3] !== last_BranchMuxO_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[3] = BranchMuxO_expected_prev[3];
	end
	if (
		( BranchMuxO_expected_prev[4] !== 1'bx ) && ( BranchMuxO_prev[4] !== BranchMuxO_expected_prev[4] )
		&& ((BranchMuxO_expected_prev[4] !== last_BranchMuxO_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[4] = BranchMuxO_expected_prev[4];
	end
	if (
		( BranchMuxO_expected_prev[5] !== 1'bx ) && ( BranchMuxO_prev[5] !== BranchMuxO_expected_prev[5] )
		&& ((BranchMuxO_expected_prev[5] !== last_BranchMuxO_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[5] = BranchMuxO_expected_prev[5];
	end
	if (
		( BranchMuxO_expected_prev[6] !== 1'bx ) && ( BranchMuxO_prev[6] !== BranchMuxO_expected_prev[6] )
		&& ((BranchMuxO_expected_prev[6] !== last_BranchMuxO_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[6] = BranchMuxO_expected_prev[6];
	end
	if (
		( BranchMuxO_expected_prev[7] !== 1'bx ) && ( BranchMuxO_prev[7] !== BranchMuxO_expected_prev[7] )
		&& ((BranchMuxO_expected_prev[7] !== last_BranchMuxO_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[7] = BranchMuxO_expected_prev[7];
	end
	if (
		( BranchMuxO_expected_prev[8] !== 1'bx ) && ( BranchMuxO_prev[8] !== BranchMuxO_expected_prev[8] )
		&& ((BranchMuxO_expected_prev[8] !== last_BranchMuxO_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[8] = BranchMuxO_expected_prev[8];
	end
	if (
		( BranchMuxO_expected_prev[9] !== 1'bx ) && ( BranchMuxO_prev[9] !== BranchMuxO_expected_prev[9] )
		&& ((BranchMuxO_expected_prev[9] !== last_BranchMuxO_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[9] = BranchMuxO_expected_prev[9];
	end
	if (
		( BranchMuxO_expected_prev[10] !== 1'bx ) && ( BranchMuxO_prev[10] !== BranchMuxO_expected_prev[10] )
		&& ((BranchMuxO_expected_prev[10] !== last_BranchMuxO_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[10] = BranchMuxO_expected_prev[10];
	end
	if (
		( BranchMuxO_expected_prev[11] !== 1'bx ) && ( BranchMuxO_prev[11] !== BranchMuxO_expected_prev[11] )
		&& ((BranchMuxO_expected_prev[11] !== last_BranchMuxO_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[11] = BranchMuxO_expected_prev[11];
	end
	if (
		( BranchMuxO_expected_prev[12] !== 1'bx ) && ( BranchMuxO_prev[12] !== BranchMuxO_expected_prev[12] )
		&& ((BranchMuxO_expected_prev[12] !== last_BranchMuxO_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[12] = BranchMuxO_expected_prev[12];
	end
	if (
		( BranchMuxO_expected_prev[13] !== 1'bx ) && ( BranchMuxO_prev[13] !== BranchMuxO_expected_prev[13] )
		&& ((BranchMuxO_expected_prev[13] !== last_BranchMuxO_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[13] = BranchMuxO_expected_prev[13];
	end
	if (
		( BranchMuxO_expected_prev[14] !== 1'bx ) && ( BranchMuxO_prev[14] !== BranchMuxO_expected_prev[14] )
		&& ((BranchMuxO_expected_prev[14] !== last_BranchMuxO_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[14] = BranchMuxO_expected_prev[14];
	end
	if (
		( BranchMuxO_expected_prev[15] !== 1'bx ) && ( BranchMuxO_prev[15] !== BranchMuxO_expected_prev[15] )
		&& ((BranchMuxO_expected_prev[15] !== last_BranchMuxO_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[15] = BranchMuxO_expected_prev[15];
	end
	if (
		( BranchMuxO_expected_prev[16] !== 1'bx ) && ( BranchMuxO_prev[16] !== BranchMuxO_expected_prev[16] )
		&& ((BranchMuxO_expected_prev[16] !== last_BranchMuxO_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[16] = BranchMuxO_expected_prev[16];
	end
	if (
		( BranchMuxO_expected_prev[17] !== 1'bx ) && ( BranchMuxO_prev[17] !== BranchMuxO_expected_prev[17] )
		&& ((BranchMuxO_expected_prev[17] !== last_BranchMuxO_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[17] = BranchMuxO_expected_prev[17];
	end
	if (
		( BranchMuxO_expected_prev[18] !== 1'bx ) && ( BranchMuxO_prev[18] !== BranchMuxO_expected_prev[18] )
		&& ((BranchMuxO_expected_prev[18] !== last_BranchMuxO_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[18] = BranchMuxO_expected_prev[18];
	end
	if (
		( BranchMuxO_expected_prev[19] !== 1'bx ) && ( BranchMuxO_prev[19] !== BranchMuxO_expected_prev[19] )
		&& ((BranchMuxO_expected_prev[19] !== last_BranchMuxO_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[19] = BranchMuxO_expected_prev[19];
	end
	if (
		( BranchMuxO_expected_prev[20] !== 1'bx ) && ( BranchMuxO_prev[20] !== BranchMuxO_expected_prev[20] )
		&& ((BranchMuxO_expected_prev[20] !== last_BranchMuxO_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[20] = BranchMuxO_expected_prev[20];
	end
	if (
		( BranchMuxO_expected_prev[21] !== 1'bx ) && ( BranchMuxO_prev[21] !== BranchMuxO_expected_prev[21] )
		&& ((BranchMuxO_expected_prev[21] !== last_BranchMuxO_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[21] = BranchMuxO_expected_prev[21];
	end
	if (
		( BranchMuxO_expected_prev[22] !== 1'bx ) && ( BranchMuxO_prev[22] !== BranchMuxO_expected_prev[22] )
		&& ((BranchMuxO_expected_prev[22] !== last_BranchMuxO_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[22] = BranchMuxO_expected_prev[22];
	end
	if (
		( BranchMuxO_expected_prev[23] !== 1'bx ) && ( BranchMuxO_prev[23] !== BranchMuxO_expected_prev[23] )
		&& ((BranchMuxO_expected_prev[23] !== last_BranchMuxO_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[23] = BranchMuxO_expected_prev[23];
	end
	if (
		( BranchMuxO_expected_prev[24] !== 1'bx ) && ( BranchMuxO_prev[24] !== BranchMuxO_expected_prev[24] )
		&& ((BranchMuxO_expected_prev[24] !== last_BranchMuxO_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[24] = BranchMuxO_expected_prev[24];
	end
	if (
		( BranchMuxO_expected_prev[25] !== 1'bx ) && ( BranchMuxO_prev[25] !== BranchMuxO_expected_prev[25] )
		&& ((BranchMuxO_expected_prev[25] !== last_BranchMuxO_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[25] = BranchMuxO_expected_prev[25];
	end
	if (
		( BranchMuxO_expected_prev[26] !== 1'bx ) && ( BranchMuxO_prev[26] !== BranchMuxO_expected_prev[26] )
		&& ((BranchMuxO_expected_prev[26] !== last_BranchMuxO_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[26] = BranchMuxO_expected_prev[26];
	end
	if (
		( BranchMuxO_expected_prev[27] !== 1'bx ) && ( BranchMuxO_prev[27] !== BranchMuxO_expected_prev[27] )
		&& ((BranchMuxO_expected_prev[27] !== last_BranchMuxO_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[27] = BranchMuxO_expected_prev[27];
	end
	if (
		( BranchMuxO_expected_prev[28] !== 1'bx ) && ( BranchMuxO_prev[28] !== BranchMuxO_expected_prev[28] )
		&& ((BranchMuxO_expected_prev[28] !== last_BranchMuxO_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[28] = BranchMuxO_expected_prev[28];
	end
	if (
		( BranchMuxO_expected_prev[29] !== 1'bx ) && ( BranchMuxO_prev[29] !== BranchMuxO_expected_prev[29] )
		&& ((BranchMuxO_expected_prev[29] !== last_BranchMuxO_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[29] = BranchMuxO_expected_prev[29];
	end
	if (
		( BranchMuxO_expected_prev[30] !== 1'bx ) && ( BranchMuxO_prev[30] !== BranchMuxO_expected_prev[30] )
		&& ((BranchMuxO_expected_prev[30] !== last_BranchMuxO_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[30] = BranchMuxO_expected_prev[30];
	end
	if (
		( BranchMuxO_expected_prev[31] !== 1'bx ) && ( BranchMuxO_prev[31] !== BranchMuxO_expected_prev[31] )
		&& ((BranchMuxO_expected_prev[31] !== last_BranchMuxO_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchMuxO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchMuxO_expected_prev);
		$display ("     Real value = %b", BranchMuxO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BranchMuxO_exp[31] = BranchMuxO_expected_prev[31];
	end
	if (
		( BranchOffsetO_expected_prev[0] !== 1'bx ) && ( BranchOffsetO_prev[0] !== BranchOffsetO_expected_prev[0] )
		&& ((BranchOffsetO_expected_prev[0] !== last_BranchOffsetO_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[0] = BranchOffsetO_expected_prev[0];
	end
	if (
		( BranchOffsetO_expected_prev[1] !== 1'bx ) && ( BranchOffsetO_prev[1] !== BranchOffsetO_expected_prev[1] )
		&& ((BranchOffsetO_expected_prev[1] !== last_BranchOffsetO_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[1] = BranchOffsetO_expected_prev[1];
	end
	if (
		( BranchOffsetO_expected_prev[2] !== 1'bx ) && ( BranchOffsetO_prev[2] !== BranchOffsetO_expected_prev[2] )
		&& ((BranchOffsetO_expected_prev[2] !== last_BranchOffsetO_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[2] = BranchOffsetO_expected_prev[2];
	end
	if (
		( BranchOffsetO_expected_prev[3] !== 1'bx ) && ( BranchOffsetO_prev[3] !== BranchOffsetO_expected_prev[3] )
		&& ((BranchOffsetO_expected_prev[3] !== last_BranchOffsetO_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[3] = BranchOffsetO_expected_prev[3];
	end
	if (
		( BranchOffsetO_expected_prev[4] !== 1'bx ) && ( BranchOffsetO_prev[4] !== BranchOffsetO_expected_prev[4] )
		&& ((BranchOffsetO_expected_prev[4] !== last_BranchOffsetO_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[4] = BranchOffsetO_expected_prev[4];
	end
	if (
		( BranchOffsetO_expected_prev[5] !== 1'bx ) && ( BranchOffsetO_prev[5] !== BranchOffsetO_expected_prev[5] )
		&& ((BranchOffsetO_expected_prev[5] !== last_BranchOffsetO_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[5] = BranchOffsetO_expected_prev[5];
	end
	if (
		( BranchOffsetO_expected_prev[6] !== 1'bx ) && ( BranchOffsetO_prev[6] !== BranchOffsetO_expected_prev[6] )
		&& ((BranchOffsetO_expected_prev[6] !== last_BranchOffsetO_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[6] = BranchOffsetO_expected_prev[6];
	end
	if (
		( BranchOffsetO_expected_prev[7] !== 1'bx ) && ( BranchOffsetO_prev[7] !== BranchOffsetO_expected_prev[7] )
		&& ((BranchOffsetO_expected_prev[7] !== last_BranchOffsetO_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[7] = BranchOffsetO_expected_prev[7];
	end
	if (
		( BranchOffsetO_expected_prev[8] !== 1'bx ) && ( BranchOffsetO_prev[8] !== BranchOffsetO_expected_prev[8] )
		&& ((BranchOffsetO_expected_prev[8] !== last_BranchOffsetO_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[8] = BranchOffsetO_expected_prev[8];
	end
	if (
		( BranchOffsetO_expected_prev[9] !== 1'bx ) && ( BranchOffsetO_prev[9] !== BranchOffsetO_expected_prev[9] )
		&& ((BranchOffsetO_expected_prev[9] !== last_BranchOffsetO_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[9] = BranchOffsetO_expected_prev[9];
	end
	if (
		( BranchOffsetO_expected_prev[10] !== 1'bx ) && ( BranchOffsetO_prev[10] !== BranchOffsetO_expected_prev[10] )
		&& ((BranchOffsetO_expected_prev[10] !== last_BranchOffsetO_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[10] = BranchOffsetO_expected_prev[10];
	end
	if (
		( BranchOffsetO_expected_prev[11] !== 1'bx ) && ( BranchOffsetO_prev[11] !== BranchOffsetO_expected_prev[11] )
		&& ((BranchOffsetO_expected_prev[11] !== last_BranchOffsetO_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[11] = BranchOffsetO_expected_prev[11];
	end
	if (
		( BranchOffsetO_expected_prev[12] !== 1'bx ) && ( BranchOffsetO_prev[12] !== BranchOffsetO_expected_prev[12] )
		&& ((BranchOffsetO_expected_prev[12] !== last_BranchOffsetO_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[12] = BranchOffsetO_expected_prev[12];
	end
	if (
		( BranchOffsetO_expected_prev[13] !== 1'bx ) && ( BranchOffsetO_prev[13] !== BranchOffsetO_expected_prev[13] )
		&& ((BranchOffsetO_expected_prev[13] !== last_BranchOffsetO_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[13] = BranchOffsetO_expected_prev[13];
	end
	if (
		( BranchOffsetO_expected_prev[14] !== 1'bx ) && ( BranchOffsetO_prev[14] !== BranchOffsetO_expected_prev[14] )
		&& ((BranchOffsetO_expected_prev[14] !== last_BranchOffsetO_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[14] = BranchOffsetO_expected_prev[14];
	end
	if (
		( BranchOffsetO_expected_prev[15] !== 1'bx ) && ( BranchOffsetO_prev[15] !== BranchOffsetO_expected_prev[15] )
		&& ((BranchOffsetO_expected_prev[15] !== last_BranchOffsetO_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[15] = BranchOffsetO_expected_prev[15];
	end
	if (
		( BranchOffsetO_expected_prev[16] !== 1'bx ) && ( BranchOffsetO_prev[16] !== BranchOffsetO_expected_prev[16] )
		&& ((BranchOffsetO_expected_prev[16] !== last_BranchOffsetO_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[16] = BranchOffsetO_expected_prev[16];
	end
	if (
		( BranchOffsetO_expected_prev[17] !== 1'bx ) && ( BranchOffsetO_prev[17] !== BranchOffsetO_expected_prev[17] )
		&& ((BranchOffsetO_expected_prev[17] !== last_BranchOffsetO_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[17] = BranchOffsetO_expected_prev[17];
	end
	if (
		( BranchOffsetO_expected_prev[18] !== 1'bx ) && ( BranchOffsetO_prev[18] !== BranchOffsetO_expected_prev[18] )
		&& ((BranchOffsetO_expected_prev[18] !== last_BranchOffsetO_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[18] = BranchOffsetO_expected_prev[18];
	end
	if (
		( BranchOffsetO_expected_prev[19] !== 1'bx ) && ( BranchOffsetO_prev[19] !== BranchOffsetO_expected_prev[19] )
		&& ((BranchOffsetO_expected_prev[19] !== last_BranchOffsetO_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[19] = BranchOffsetO_expected_prev[19];
	end
	if (
		( BranchOffsetO_expected_prev[20] !== 1'bx ) && ( BranchOffsetO_prev[20] !== BranchOffsetO_expected_prev[20] )
		&& ((BranchOffsetO_expected_prev[20] !== last_BranchOffsetO_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[20] = BranchOffsetO_expected_prev[20];
	end
	if (
		( BranchOffsetO_expected_prev[21] !== 1'bx ) && ( BranchOffsetO_prev[21] !== BranchOffsetO_expected_prev[21] )
		&& ((BranchOffsetO_expected_prev[21] !== last_BranchOffsetO_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[21] = BranchOffsetO_expected_prev[21];
	end
	if (
		( BranchOffsetO_expected_prev[22] !== 1'bx ) && ( BranchOffsetO_prev[22] !== BranchOffsetO_expected_prev[22] )
		&& ((BranchOffsetO_expected_prev[22] !== last_BranchOffsetO_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[22] = BranchOffsetO_expected_prev[22];
	end
	if (
		( BranchOffsetO_expected_prev[23] !== 1'bx ) && ( BranchOffsetO_prev[23] !== BranchOffsetO_expected_prev[23] )
		&& ((BranchOffsetO_expected_prev[23] !== last_BranchOffsetO_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[23] = BranchOffsetO_expected_prev[23];
	end
	if (
		( BranchOffsetO_expected_prev[24] !== 1'bx ) && ( BranchOffsetO_prev[24] !== BranchOffsetO_expected_prev[24] )
		&& ((BranchOffsetO_expected_prev[24] !== last_BranchOffsetO_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[24] = BranchOffsetO_expected_prev[24];
	end
	if (
		( BranchOffsetO_expected_prev[25] !== 1'bx ) && ( BranchOffsetO_prev[25] !== BranchOffsetO_expected_prev[25] )
		&& ((BranchOffsetO_expected_prev[25] !== last_BranchOffsetO_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[25] = BranchOffsetO_expected_prev[25];
	end
	if (
		( BranchOffsetO_expected_prev[26] !== 1'bx ) && ( BranchOffsetO_prev[26] !== BranchOffsetO_expected_prev[26] )
		&& ((BranchOffsetO_expected_prev[26] !== last_BranchOffsetO_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[26] = BranchOffsetO_expected_prev[26];
	end
	if (
		( BranchOffsetO_expected_prev[27] !== 1'bx ) && ( BranchOffsetO_prev[27] !== BranchOffsetO_expected_prev[27] )
		&& ((BranchOffsetO_expected_prev[27] !== last_BranchOffsetO_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[27] = BranchOffsetO_expected_prev[27];
	end
	if (
		( BranchOffsetO_expected_prev[28] !== 1'bx ) && ( BranchOffsetO_prev[28] !== BranchOffsetO_expected_prev[28] )
		&& ((BranchOffsetO_expected_prev[28] !== last_BranchOffsetO_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[28] = BranchOffsetO_expected_prev[28];
	end
	if (
		( BranchOffsetO_expected_prev[29] !== 1'bx ) && ( BranchOffsetO_prev[29] !== BranchOffsetO_expected_prev[29] )
		&& ((BranchOffsetO_expected_prev[29] !== last_BranchOffsetO_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[29] = BranchOffsetO_expected_prev[29];
	end
	if (
		( BranchOffsetO_expected_prev[30] !== 1'bx ) && ( BranchOffsetO_prev[30] !== BranchOffsetO_expected_prev[30] )
		&& ((BranchOffsetO_expected_prev[30] !== last_BranchOffsetO_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[30] = BranchOffsetO_expected_prev[30];
	end
	if (
		( BranchOffsetO_expected_prev[31] !== 1'bx ) && ( BranchOffsetO_prev[31] !== BranchOffsetO_expected_prev[31] )
		&& ((BranchOffsetO_expected_prev[31] !== last_BranchOffsetO_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOffsetO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOffsetO_expected_prev);
		$display ("     Real value = %b", BranchOffsetO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BranchOffsetO_exp[31] = BranchOffsetO_expected_prev[31];
	end
	if (
		( BranchOut_expected_prev !== 1'bx ) && ( BranchOut_prev !== BranchOut_expected_prev )
		&& ((BranchOut_expected_prev !== last_BranchOut_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOut_expected_prev);
		$display ("     Real value = %b", BranchOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BranchOut_exp = BranchOut_expected_prev;
	end
	if (
		( InstructionOut_expected_prev[0] !== 1'bx ) && ( InstructionOut_prev[0] !== InstructionOut_expected_prev[0] )
		&& ((InstructionOut_expected_prev[0] !== last_InstructionOut_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[0] = InstructionOut_expected_prev[0];
	end
	if (
		( InstructionOut_expected_prev[1] !== 1'bx ) && ( InstructionOut_prev[1] !== InstructionOut_expected_prev[1] )
		&& ((InstructionOut_expected_prev[1] !== last_InstructionOut_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[1] = InstructionOut_expected_prev[1];
	end
	if (
		( InstructionOut_expected_prev[2] !== 1'bx ) && ( InstructionOut_prev[2] !== InstructionOut_expected_prev[2] )
		&& ((InstructionOut_expected_prev[2] !== last_InstructionOut_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[2] = InstructionOut_expected_prev[2];
	end
	if (
		( InstructionOut_expected_prev[3] !== 1'bx ) && ( InstructionOut_prev[3] !== InstructionOut_expected_prev[3] )
		&& ((InstructionOut_expected_prev[3] !== last_InstructionOut_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[3] = InstructionOut_expected_prev[3];
	end
	if (
		( InstructionOut_expected_prev[4] !== 1'bx ) && ( InstructionOut_prev[4] !== InstructionOut_expected_prev[4] )
		&& ((InstructionOut_expected_prev[4] !== last_InstructionOut_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[4] = InstructionOut_expected_prev[4];
	end
	if (
		( InstructionOut_expected_prev[5] !== 1'bx ) && ( InstructionOut_prev[5] !== InstructionOut_expected_prev[5] )
		&& ((InstructionOut_expected_prev[5] !== last_InstructionOut_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[5] = InstructionOut_expected_prev[5];
	end
	if (
		( InstructionOut_expected_prev[6] !== 1'bx ) && ( InstructionOut_prev[6] !== InstructionOut_expected_prev[6] )
		&& ((InstructionOut_expected_prev[6] !== last_InstructionOut_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[6] = InstructionOut_expected_prev[6];
	end
	if (
		( InstructionOut_expected_prev[7] !== 1'bx ) && ( InstructionOut_prev[7] !== InstructionOut_expected_prev[7] )
		&& ((InstructionOut_expected_prev[7] !== last_InstructionOut_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[7] = InstructionOut_expected_prev[7];
	end
	if (
		( InstructionOut_expected_prev[8] !== 1'bx ) && ( InstructionOut_prev[8] !== InstructionOut_expected_prev[8] )
		&& ((InstructionOut_expected_prev[8] !== last_InstructionOut_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[8] = InstructionOut_expected_prev[8];
	end
	if (
		( InstructionOut_expected_prev[9] !== 1'bx ) && ( InstructionOut_prev[9] !== InstructionOut_expected_prev[9] )
		&& ((InstructionOut_expected_prev[9] !== last_InstructionOut_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[9] = InstructionOut_expected_prev[9];
	end
	if (
		( InstructionOut_expected_prev[10] !== 1'bx ) && ( InstructionOut_prev[10] !== InstructionOut_expected_prev[10] )
		&& ((InstructionOut_expected_prev[10] !== last_InstructionOut_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[10] = InstructionOut_expected_prev[10];
	end
	if (
		( InstructionOut_expected_prev[11] !== 1'bx ) && ( InstructionOut_prev[11] !== InstructionOut_expected_prev[11] )
		&& ((InstructionOut_expected_prev[11] !== last_InstructionOut_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[11] = InstructionOut_expected_prev[11];
	end
	if (
		( InstructionOut_expected_prev[12] !== 1'bx ) && ( InstructionOut_prev[12] !== InstructionOut_expected_prev[12] )
		&& ((InstructionOut_expected_prev[12] !== last_InstructionOut_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[12] = InstructionOut_expected_prev[12];
	end
	if (
		( InstructionOut_expected_prev[13] !== 1'bx ) && ( InstructionOut_prev[13] !== InstructionOut_expected_prev[13] )
		&& ((InstructionOut_expected_prev[13] !== last_InstructionOut_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[13] = InstructionOut_expected_prev[13];
	end
	if (
		( InstructionOut_expected_prev[14] !== 1'bx ) && ( InstructionOut_prev[14] !== InstructionOut_expected_prev[14] )
		&& ((InstructionOut_expected_prev[14] !== last_InstructionOut_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[14] = InstructionOut_expected_prev[14];
	end
	if (
		( InstructionOut_expected_prev[15] !== 1'bx ) && ( InstructionOut_prev[15] !== InstructionOut_expected_prev[15] )
		&& ((InstructionOut_expected_prev[15] !== last_InstructionOut_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[15] = InstructionOut_expected_prev[15];
	end
	if (
		( InstructionOut_expected_prev[16] !== 1'bx ) && ( InstructionOut_prev[16] !== InstructionOut_expected_prev[16] )
		&& ((InstructionOut_expected_prev[16] !== last_InstructionOut_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[16] = InstructionOut_expected_prev[16];
	end
	if (
		( InstructionOut_expected_prev[17] !== 1'bx ) && ( InstructionOut_prev[17] !== InstructionOut_expected_prev[17] )
		&& ((InstructionOut_expected_prev[17] !== last_InstructionOut_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[17] = InstructionOut_expected_prev[17];
	end
	if (
		( InstructionOut_expected_prev[18] !== 1'bx ) && ( InstructionOut_prev[18] !== InstructionOut_expected_prev[18] )
		&& ((InstructionOut_expected_prev[18] !== last_InstructionOut_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[18] = InstructionOut_expected_prev[18];
	end
	if (
		( InstructionOut_expected_prev[19] !== 1'bx ) && ( InstructionOut_prev[19] !== InstructionOut_expected_prev[19] )
		&& ((InstructionOut_expected_prev[19] !== last_InstructionOut_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[19] = InstructionOut_expected_prev[19];
	end
	if (
		( InstructionOut_expected_prev[20] !== 1'bx ) && ( InstructionOut_prev[20] !== InstructionOut_expected_prev[20] )
		&& ((InstructionOut_expected_prev[20] !== last_InstructionOut_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[20] = InstructionOut_expected_prev[20];
	end
	if (
		( InstructionOut_expected_prev[21] !== 1'bx ) && ( InstructionOut_prev[21] !== InstructionOut_expected_prev[21] )
		&& ((InstructionOut_expected_prev[21] !== last_InstructionOut_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[21] = InstructionOut_expected_prev[21];
	end
	if (
		( InstructionOut_expected_prev[22] !== 1'bx ) && ( InstructionOut_prev[22] !== InstructionOut_expected_prev[22] )
		&& ((InstructionOut_expected_prev[22] !== last_InstructionOut_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[22] = InstructionOut_expected_prev[22];
	end
	if (
		( InstructionOut_expected_prev[23] !== 1'bx ) && ( InstructionOut_prev[23] !== InstructionOut_expected_prev[23] )
		&& ((InstructionOut_expected_prev[23] !== last_InstructionOut_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[23] = InstructionOut_expected_prev[23];
	end
	if (
		( InstructionOut_expected_prev[24] !== 1'bx ) && ( InstructionOut_prev[24] !== InstructionOut_expected_prev[24] )
		&& ((InstructionOut_expected_prev[24] !== last_InstructionOut_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[24] = InstructionOut_expected_prev[24];
	end
	if (
		( InstructionOut_expected_prev[25] !== 1'bx ) && ( InstructionOut_prev[25] !== InstructionOut_expected_prev[25] )
		&& ((InstructionOut_expected_prev[25] !== last_InstructionOut_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[25] = InstructionOut_expected_prev[25];
	end
	if (
		( InstructionOut_expected_prev[26] !== 1'bx ) && ( InstructionOut_prev[26] !== InstructionOut_expected_prev[26] )
		&& ((InstructionOut_expected_prev[26] !== last_InstructionOut_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[26] = InstructionOut_expected_prev[26];
	end
	if (
		( InstructionOut_expected_prev[27] !== 1'bx ) && ( InstructionOut_prev[27] !== InstructionOut_expected_prev[27] )
		&& ((InstructionOut_expected_prev[27] !== last_InstructionOut_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[27] = InstructionOut_expected_prev[27];
	end
	if (
		( InstructionOut_expected_prev[28] !== 1'bx ) && ( InstructionOut_prev[28] !== InstructionOut_expected_prev[28] )
		&& ((InstructionOut_expected_prev[28] !== last_InstructionOut_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[28] = InstructionOut_expected_prev[28];
	end
	if (
		( InstructionOut_expected_prev[29] !== 1'bx ) && ( InstructionOut_prev[29] !== InstructionOut_expected_prev[29] )
		&& ((InstructionOut_expected_prev[29] !== last_InstructionOut_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[29] = InstructionOut_expected_prev[29];
	end
	if (
		( InstructionOut_expected_prev[30] !== 1'bx ) && ( InstructionOut_prev[30] !== InstructionOut_expected_prev[30] )
		&& ((InstructionOut_expected_prev[30] !== last_InstructionOut_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[30] = InstructionOut_expected_prev[30];
	end
	if (
		( InstructionOut_expected_prev[31] !== 1'bx ) && ( InstructionOut_prev[31] !== InstructionOut_expected_prev[31] )
		&& ((InstructionOut_expected_prev[31] !== last_InstructionOut_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_InstructionOut_exp[31] = InstructionOut_expected_prev[31];
	end
	if (
		( JumpAddressO_expected_prev[0] !== 1'bx ) && ( JumpAddressO_prev[0] !== JumpAddressO_expected_prev[0] )
		&& ((JumpAddressO_expected_prev[0] !== last_JumpAddressO_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[0] = JumpAddressO_expected_prev[0];
	end
	if (
		( JumpAddressO_expected_prev[1] !== 1'bx ) && ( JumpAddressO_prev[1] !== JumpAddressO_expected_prev[1] )
		&& ((JumpAddressO_expected_prev[1] !== last_JumpAddressO_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[1] = JumpAddressO_expected_prev[1];
	end
	if (
		( JumpAddressO_expected_prev[2] !== 1'bx ) && ( JumpAddressO_prev[2] !== JumpAddressO_expected_prev[2] )
		&& ((JumpAddressO_expected_prev[2] !== last_JumpAddressO_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[2] = JumpAddressO_expected_prev[2];
	end
	if (
		( JumpAddressO_expected_prev[3] !== 1'bx ) && ( JumpAddressO_prev[3] !== JumpAddressO_expected_prev[3] )
		&& ((JumpAddressO_expected_prev[3] !== last_JumpAddressO_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[3] = JumpAddressO_expected_prev[3];
	end
	if (
		( JumpAddressO_expected_prev[4] !== 1'bx ) && ( JumpAddressO_prev[4] !== JumpAddressO_expected_prev[4] )
		&& ((JumpAddressO_expected_prev[4] !== last_JumpAddressO_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[4] = JumpAddressO_expected_prev[4];
	end
	if (
		( JumpAddressO_expected_prev[5] !== 1'bx ) && ( JumpAddressO_prev[5] !== JumpAddressO_expected_prev[5] )
		&& ((JumpAddressO_expected_prev[5] !== last_JumpAddressO_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[5] = JumpAddressO_expected_prev[5];
	end
	if (
		( JumpAddressO_expected_prev[6] !== 1'bx ) && ( JumpAddressO_prev[6] !== JumpAddressO_expected_prev[6] )
		&& ((JumpAddressO_expected_prev[6] !== last_JumpAddressO_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[6] = JumpAddressO_expected_prev[6];
	end
	if (
		( JumpAddressO_expected_prev[7] !== 1'bx ) && ( JumpAddressO_prev[7] !== JumpAddressO_expected_prev[7] )
		&& ((JumpAddressO_expected_prev[7] !== last_JumpAddressO_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[7] = JumpAddressO_expected_prev[7];
	end
	if (
		( JumpAddressO_expected_prev[8] !== 1'bx ) && ( JumpAddressO_prev[8] !== JumpAddressO_expected_prev[8] )
		&& ((JumpAddressO_expected_prev[8] !== last_JumpAddressO_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[8] = JumpAddressO_expected_prev[8];
	end
	if (
		( JumpAddressO_expected_prev[9] !== 1'bx ) && ( JumpAddressO_prev[9] !== JumpAddressO_expected_prev[9] )
		&& ((JumpAddressO_expected_prev[9] !== last_JumpAddressO_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[9] = JumpAddressO_expected_prev[9];
	end
	if (
		( JumpAddressO_expected_prev[10] !== 1'bx ) && ( JumpAddressO_prev[10] !== JumpAddressO_expected_prev[10] )
		&& ((JumpAddressO_expected_prev[10] !== last_JumpAddressO_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[10] = JumpAddressO_expected_prev[10];
	end
	if (
		( JumpAddressO_expected_prev[11] !== 1'bx ) && ( JumpAddressO_prev[11] !== JumpAddressO_expected_prev[11] )
		&& ((JumpAddressO_expected_prev[11] !== last_JumpAddressO_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[11] = JumpAddressO_expected_prev[11];
	end
	if (
		( JumpAddressO_expected_prev[12] !== 1'bx ) && ( JumpAddressO_prev[12] !== JumpAddressO_expected_prev[12] )
		&& ((JumpAddressO_expected_prev[12] !== last_JumpAddressO_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[12] = JumpAddressO_expected_prev[12];
	end
	if (
		( JumpAddressO_expected_prev[13] !== 1'bx ) && ( JumpAddressO_prev[13] !== JumpAddressO_expected_prev[13] )
		&& ((JumpAddressO_expected_prev[13] !== last_JumpAddressO_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[13] = JumpAddressO_expected_prev[13];
	end
	if (
		( JumpAddressO_expected_prev[14] !== 1'bx ) && ( JumpAddressO_prev[14] !== JumpAddressO_expected_prev[14] )
		&& ((JumpAddressO_expected_prev[14] !== last_JumpAddressO_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[14] = JumpAddressO_expected_prev[14];
	end
	if (
		( JumpAddressO_expected_prev[15] !== 1'bx ) && ( JumpAddressO_prev[15] !== JumpAddressO_expected_prev[15] )
		&& ((JumpAddressO_expected_prev[15] !== last_JumpAddressO_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[15] = JumpAddressO_expected_prev[15];
	end
	if (
		( JumpAddressO_expected_prev[16] !== 1'bx ) && ( JumpAddressO_prev[16] !== JumpAddressO_expected_prev[16] )
		&& ((JumpAddressO_expected_prev[16] !== last_JumpAddressO_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[16] = JumpAddressO_expected_prev[16];
	end
	if (
		( JumpAddressO_expected_prev[17] !== 1'bx ) && ( JumpAddressO_prev[17] !== JumpAddressO_expected_prev[17] )
		&& ((JumpAddressO_expected_prev[17] !== last_JumpAddressO_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[17] = JumpAddressO_expected_prev[17];
	end
	if (
		( JumpAddressO_expected_prev[18] !== 1'bx ) && ( JumpAddressO_prev[18] !== JumpAddressO_expected_prev[18] )
		&& ((JumpAddressO_expected_prev[18] !== last_JumpAddressO_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[18] = JumpAddressO_expected_prev[18];
	end
	if (
		( JumpAddressO_expected_prev[19] !== 1'bx ) && ( JumpAddressO_prev[19] !== JumpAddressO_expected_prev[19] )
		&& ((JumpAddressO_expected_prev[19] !== last_JumpAddressO_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[19] = JumpAddressO_expected_prev[19];
	end
	if (
		( JumpAddressO_expected_prev[20] !== 1'bx ) && ( JumpAddressO_prev[20] !== JumpAddressO_expected_prev[20] )
		&& ((JumpAddressO_expected_prev[20] !== last_JumpAddressO_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[20] = JumpAddressO_expected_prev[20];
	end
	if (
		( JumpAddressO_expected_prev[21] !== 1'bx ) && ( JumpAddressO_prev[21] !== JumpAddressO_expected_prev[21] )
		&& ((JumpAddressO_expected_prev[21] !== last_JumpAddressO_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[21] = JumpAddressO_expected_prev[21];
	end
	if (
		( JumpAddressO_expected_prev[22] !== 1'bx ) && ( JumpAddressO_prev[22] !== JumpAddressO_expected_prev[22] )
		&& ((JumpAddressO_expected_prev[22] !== last_JumpAddressO_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[22] = JumpAddressO_expected_prev[22];
	end
	if (
		( JumpAddressO_expected_prev[23] !== 1'bx ) && ( JumpAddressO_prev[23] !== JumpAddressO_expected_prev[23] )
		&& ((JumpAddressO_expected_prev[23] !== last_JumpAddressO_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[23] = JumpAddressO_expected_prev[23];
	end
	if (
		( JumpAddressO_expected_prev[24] !== 1'bx ) && ( JumpAddressO_prev[24] !== JumpAddressO_expected_prev[24] )
		&& ((JumpAddressO_expected_prev[24] !== last_JumpAddressO_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[24] = JumpAddressO_expected_prev[24];
	end
	if (
		( JumpAddressO_expected_prev[25] !== 1'bx ) && ( JumpAddressO_prev[25] !== JumpAddressO_expected_prev[25] )
		&& ((JumpAddressO_expected_prev[25] !== last_JumpAddressO_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[25] = JumpAddressO_expected_prev[25];
	end
	if (
		( JumpAddressO_expected_prev[26] !== 1'bx ) && ( JumpAddressO_prev[26] !== JumpAddressO_expected_prev[26] )
		&& ((JumpAddressO_expected_prev[26] !== last_JumpAddressO_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[26] = JumpAddressO_expected_prev[26];
	end
	if (
		( JumpAddressO_expected_prev[27] !== 1'bx ) && ( JumpAddressO_prev[27] !== JumpAddressO_expected_prev[27] )
		&& ((JumpAddressO_expected_prev[27] !== last_JumpAddressO_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[27] = JumpAddressO_expected_prev[27];
	end
	if (
		( JumpAddressO_expected_prev[28] !== 1'bx ) && ( JumpAddressO_prev[28] !== JumpAddressO_expected_prev[28] )
		&& ((JumpAddressO_expected_prev[28] !== last_JumpAddressO_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[28] = JumpAddressO_expected_prev[28];
	end
	if (
		( JumpAddressO_expected_prev[29] !== 1'bx ) && ( JumpAddressO_prev[29] !== JumpAddressO_expected_prev[29] )
		&& ((JumpAddressO_expected_prev[29] !== last_JumpAddressO_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[29] = JumpAddressO_expected_prev[29];
	end
	if (
		( JumpAddressO_expected_prev[30] !== 1'bx ) && ( JumpAddressO_prev[30] !== JumpAddressO_expected_prev[30] )
		&& ((JumpAddressO_expected_prev[30] !== last_JumpAddressO_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[30] = JumpAddressO_expected_prev[30];
	end
	if (
		( JumpAddressO_expected_prev[31] !== 1'bx ) && ( JumpAddressO_prev[31] !== JumpAddressO_expected_prev[31] )
		&& ((JumpAddressO_expected_prev[31] !== last_JumpAddressO_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpAddressO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpAddressO_expected_prev);
		$display ("     Real value = %b", JumpAddressO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JumpAddressO_exp[31] = JumpAddressO_expected_prev[31];
	end
	if (
		( JumpO_expected_prev !== 1'bx ) && ( JumpO_prev !== JumpO_expected_prev )
		&& ((JumpO_expected_prev !== last_JumpO_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpO_expected_prev);
		$display ("     Real value = %b", JumpO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_JumpO_exp = JumpO_expected_prev;
	end
	if (
		( MemWriteOut_expected_prev !== 1'bx ) && ( MemWriteOut_prev !== MemWriteOut_expected_prev )
		&& ((MemWriteOut_expected_prev !== last_MemWriteOut_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWriteOut_expected_prev);
		$display ("     Real value = %b", MemWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MemWriteOut_exp = MemWriteOut_expected_prev;
	end
	if (
		( MuxOut_expected_prev[0] !== 1'bx ) && ( MuxOut_prev[0] !== MuxOut_expected_prev[0] )
		&& ((MuxOut_expected_prev[0] !== last_MuxOut_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[0] = MuxOut_expected_prev[0];
	end
	if (
		( MuxOut_expected_prev[1] !== 1'bx ) && ( MuxOut_prev[1] !== MuxOut_expected_prev[1] )
		&& ((MuxOut_expected_prev[1] !== last_MuxOut_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[1] = MuxOut_expected_prev[1];
	end
	if (
		( MuxOut_expected_prev[2] !== 1'bx ) && ( MuxOut_prev[2] !== MuxOut_expected_prev[2] )
		&& ((MuxOut_expected_prev[2] !== last_MuxOut_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[2] = MuxOut_expected_prev[2];
	end
	if (
		( MuxOut_expected_prev[3] !== 1'bx ) && ( MuxOut_prev[3] !== MuxOut_expected_prev[3] )
		&& ((MuxOut_expected_prev[3] !== last_MuxOut_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[3] = MuxOut_expected_prev[3];
	end
	if (
		( MuxOut_expected_prev[4] !== 1'bx ) && ( MuxOut_prev[4] !== MuxOut_expected_prev[4] )
		&& ((MuxOut_expected_prev[4] !== last_MuxOut_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[4] = MuxOut_expected_prev[4];
	end
	if (
		( MuxOut_expected_prev[5] !== 1'bx ) && ( MuxOut_prev[5] !== MuxOut_expected_prev[5] )
		&& ((MuxOut_expected_prev[5] !== last_MuxOut_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[5] = MuxOut_expected_prev[5];
	end
	if (
		( MuxOut_expected_prev[6] !== 1'bx ) && ( MuxOut_prev[6] !== MuxOut_expected_prev[6] )
		&& ((MuxOut_expected_prev[6] !== last_MuxOut_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[6] = MuxOut_expected_prev[6];
	end
	if (
		( MuxOut_expected_prev[7] !== 1'bx ) && ( MuxOut_prev[7] !== MuxOut_expected_prev[7] )
		&& ((MuxOut_expected_prev[7] !== last_MuxOut_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_MuxOut_exp[7] = MuxOut_expected_prev[7];
	end
	if (
		( PC4AddedO_expected_prev[0] !== 1'bx ) && ( PC4AddedO_prev[0] !== PC4AddedO_expected_prev[0] )
		&& ((PC4AddedO_expected_prev[0] !== last_PC4AddedO_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[0] = PC4AddedO_expected_prev[0];
	end
	if (
		( PC4AddedO_expected_prev[1] !== 1'bx ) && ( PC4AddedO_prev[1] !== PC4AddedO_expected_prev[1] )
		&& ((PC4AddedO_expected_prev[1] !== last_PC4AddedO_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[1] = PC4AddedO_expected_prev[1];
	end
	if (
		( PC4AddedO_expected_prev[2] !== 1'bx ) && ( PC4AddedO_prev[2] !== PC4AddedO_expected_prev[2] )
		&& ((PC4AddedO_expected_prev[2] !== last_PC4AddedO_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[2] = PC4AddedO_expected_prev[2];
	end
	if (
		( PC4AddedO_expected_prev[3] !== 1'bx ) && ( PC4AddedO_prev[3] !== PC4AddedO_expected_prev[3] )
		&& ((PC4AddedO_expected_prev[3] !== last_PC4AddedO_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[3] = PC4AddedO_expected_prev[3];
	end
	if (
		( PC4AddedO_expected_prev[4] !== 1'bx ) && ( PC4AddedO_prev[4] !== PC4AddedO_expected_prev[4] )
		&& ((PC4AddedO_expected_prev[4] !== last_PC4AddedO_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[4] = PC4AddedO_expected_prev[4];
	end
	if (
		( PC4AddedO_expected_prev[5] !== 1'bx ) && ( PC4AddedO_prev[5] !== PC4AddedO_expected_prev[5] )
		&& ((PC4AddedO_expected_prev[5] !== last_PC4AddedO_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[5] = PC4AddedO_expected_prev[5];
	end
	if (
		( PC4AddedO_expected_prev[6] !== 1'bx ) && ( PC4AddedO_prev[6] !== PC4AddedO_expected_prev[6] )
		&& ((PC4AddedO_expected_prev[6] !== last_PC4AddedO_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[6] = PC4AddedO_expected_prev[6];
	end
	if (
		( PC4AddedO_expected_prev[7] !== 1'bx ) && ( PC4AddedO_prev[7] !== PC4AddedO_expected_prev[7] )
		&& ((PC4AddedO_expected_prev[7] !== last_PC4AddedO_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[7] = PC4AddedO_expected_prev[7];
	end
	if (
		( PC4AddedO_expected_prev[8] !== 1'bx ) && ( PC4AddedO_prev[8] !== PC4AddedO_expected_prev[8] )
		&& ((PC4AddedO_expected_prev[8] !== last_PC4AddedO_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[8] = PC4AddedO_expected_prev[8];
	end
	if (
		( PC4AddedO_expected_prev[9] !== 1'bx ) && ( PC4AddedO_prev[9] !== PC4AddedO_expected_prev[9] )
		&& ((PC4AddedO_expected_prev[9] !== last_PC4AddedO_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[9] = PC4AddedO_expected_prev[9];
	end
	if (
		( PC4AddedO_expected_prev[10] !== 1'bx ) && ( PC4AddedO_prev[10] !== PC4AddedO_expected_prev[10] )
		&& ((PC4AddedO_expected_prev[10] !== last_PC4AddedO_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[10] = PC4AddedO_expected_prev[10];
	end
	if (
		( PC4AddedO_expected_prev[11] !== 1'bx ) && ( PC4AddedO_prev[11] !== PC4AddedO_expected_prev[11] )
		&& ((PC4AddedO_expected_prev[11] !== last_PC4AddedO_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[11] = PC4AddedO_expected_prev[11];
	end
	if (
		( PC4AddedO_expected_prev[12] !== 1'bx ) && ( PC4AddedO_prev[12] !== PC4AddedO_expected_prev[12] )
		&& ((PC4AddedO_expected_prev[12] !== last_PC4AddedO_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[12] = PC4AddedO_expected_prev[12];
	end
	if (
		( PC4AddedO_expected_prev[13] !== 1'bx ) && ( PC4AddedO_prev[13] !== PC4AddedO_expected_prev[13] )
		&& ((PC4AddedO_expected_prev[13] !== last_PC4AddedO_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[13] = PC4AddedO_expected_prev[13];
	end
	if (
		( PC4AddedO_expected_prev[14] !== 1'bx ) && ( PC4AddedO_prev[14] !== PC4AddedO_expected_prev[14] )
		&& ((PC4AddedO_expected_prev[14] !== last_PC4AddedO_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[14] = PC4AddedO_expected_prev[14];
	end
	if (
		( PC4AddedO_expected_prev[15] !== 1'bx ) && ( PC4AddedO_prev[15] !== PC4AddedO_expected_prev[15] )
		&& ((PC4AddedO_expected_prev[15] !== last_PC4AddedO_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[15] = PC4AddedO_expected_prev[15];
	end
	if (
		( PC4AddedO_expected_prev[16] !== 1'bx ) && ( PC4AddedO_prev[16] !== PC4AddedO_expected_prev[16] )
		&& ((PC4AddedO_expected_prev[16] !== last_PC4AddedO_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[16] = PC4AddedO_expected_prev[16];
	end
	if (
		( PC4AddedO_expected_prev[17] !== 1'bx ) && ( PC4AddedO_prev[17] !== PC4AddedO_expected_prev[17] )
		&& ((PC4AddedO_expected_prev[17] !== last_PC4AddedO_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[17] = PC4AddedO_expected_prev[17];
	end
	if (
		( PC4AddedO_expected_prev[18] !== 1'bx ) && ( PC4AddedO_prev[18] !== PC4AddedO_expected_prev[18] )
		&& ((PC4AddedO_expected_prev[18] !== last_PC4AddedO_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[18] = PC4AddedO_expected_prev[18];
	end
	if (
		( PC4AddedO_expected_prev[19] !== 1'bx ) && ( PC4AddedO_prev[19] !== PC4AddedO_expected_prev[19] )
		&& ((PC4AddedO_expected_prev[19] !== last_PC4AddedO_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[19] = PC4AddedO_expected_prev[19];
	end
	if (
		( PC4AddedO_expected_prev[20] !== 1'bx ) && ( PC4AddedO_prev[20] !== PC4AddedO_expected_prev[20] )
		&& ((PC4AddedO_expected_prev[20] !== last_PC4AddedO_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[20] = PC4AddedO_expected_prev[20];
	end
	if (
		( PC4AddedO_expected_prev[21] !== 1'bx ) && ( PC4AddedO_prev[21] !== PC4AddedO_expected_prev[21] )
		&& ((PC4AddedO_expected_prev[21] !== last_PC4AddedO_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[21] = PC4AddedO_expected_prev[21];
	end
	if (
		( PC4AddedO_expected_prev[22] !== 1'bx ) && ( PC4AddedO_prev[22] !== PC4AddedO_expected_prev[22] )
		&& ((PC4AddedO_expected_prev[22] !== last_PC4AddedO_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[22] = PC4AddedO_expected_prev[22];
	end
	if (
		( PC4AddedO_expected_prev[23] !== 1'bx ) && ( PC4AddedO_prev[23] !== PC4AddedO_expected_prev[23] )
		&& ((PC4AddedO_expected_prev[23] !== last_PC4AddedO_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[23] = PC4AddedO_expected_prev[23];
	end
	if (
		( PC4AddedO_expected_prev[24] !== 1'bx ) && ( PC4AddedO_prev[24] !== PC4AddedO_expected_prev[24] )
		&& ((PC4AddedO_expected_prev[24] !== last_PC4AddedO_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[24] = PC4AddedO_expected_prev[24];
	end
	if (
		( PC4AddedO_expected_prev[25] !== 1'bx ) && ( PC4AddedO_prev[25] !== PC4AddedO_expected_prev[25] )
		&& ((PC4AddedO_expected_prev[25] !== last_PC4AddedO_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[25] = PC4AddedO_expected_prev[25];
	end
	if (
		( PC4AddedO_expected_prev[26] !== 1'bx ) && ( PC4AddedO_prev[26] !== PC4AddedO_expected_prev[26] )
		&& ((PC4AddedO_expected_prev[26] !== last_PC4AddedO_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[26] = PC4AddedO_expected_prev[26];
	end
	if (
		( PC4AddedO_expected_prev[27] !== 1'bx ) && ( PC4AddedO_prev[27] !== PC4AddedO_expected_prev[27] )
		&& ((PC4AddedO_expected_prev[27] !== last_PC4AddedO_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[27] = PC4AddedO_expected_prev[27];
	end
	if (
		( PC4AddedO_expected_prev[28] !== 1'bx ) && ( PC4AddedO_prev[28] !== PC4AddedO_expected_prev[28] )
		&& ((PC4AddedO_expected_prev[28] !== last_PC4AddedO_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[28] = PC4AddedO_expected_prev[28];
	end
	if (
		( PC4AddedO_expected_prev[29] !== 1'bx ) && ( PC4AddedO_prev[29] !== PC4AddedO_expected_prev[29] )
		&& ((PC4AddedO_expected_prev[29] !== last_PC4AddedO_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[29] = PC4AddedO_expected_prev[29];
	end
	if (
		( PC4AddedO_expected_prev[30] !== 1'bx ) && ( PC4AddedO_prev[30] !== PC4AddedO_expected_prev[30] )
		&& ((PC4AddedO_expected_prev[30] !== last_PC4AddedO_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[30] = PC4AddedO_expected_prev[30];
	end
	if (
		( PC4AddedO_expected_prev[31] !== 1'bx ) && ( PC4AddedO_prev[31] !== PC4AddedO_expected_prev[31] )
		&& ((PC4AddedO_expected_prev[31] !== last_PC4AddedO_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4AddedO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4AddedO_expected_prev);
		$display ("     Real value = %b", PC4AddedO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC4AddedO_exp[31] = PC4AddedO_expected_prev[31];
	end
	if (
		( PCin_expected_prev[0] !== 1'bx ) && ( PCin_prev[0] !== PCin_expected_prev[0] )
		&& ((PCin_expected_prev[0] !== last_PCin_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[0] = PCin_expected_prev[0];
	end
	if (
		( PCin_expected_prev[1] !== 1'bx ) && ( PCin_prev[1] !== PCin_expected_prev[1] )
		&& ((PCin_expected_prev[1] !== last_PCin_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[1] = PCin_expected_prev[1];
	end
	if (
		( PCin_expected_prev[2] !== 1'bx ) && ( PCin_prev[2] !== PCin_expected_prev[2] )
		&& ((PCin_expected_prev[2] !== last_PCin_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[2] = PCin_expected_prev[2];
	end
	if (
		( PCin_expected_prev[3] !== 1'bx ) && ( PCin_prev[3] !== PCin_expected_prev[3] )
		&& ((PCin_expected_prev[3] !== last_PCin_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[3] = PCin_expected_prev[3];
	end
	if (
		( PCin_expected_prev[4] !== 1'bx ) && ( PCin_prev[4] !== PCin_expected_prev[4] )
		&& ((PCin_expected_prev[4] !== last_PCin_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[4] = PCin_expected_prev[4];
	end
	if (
		( PCin_expected_prev[5] !== 1'bx ) && ( PCin_prev[5] !== PCin_expected_prev[5] )
		&& ((PCin_expected_prev[5] !== last_PCin_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[5] = PCin_expected_prev[5];
	end
	if (
		( PCin_expected_prev[6] !== 1'bx ) && ( PCin_prev[6] !== PCin_expected_prev[6] )
		&& ((PCin_expected_prev[6] !== last_PCin_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[6] = PCin_expected_prev[6];
	end
	if (
		( PCin_expected_prev[7] !== 1'bx ) && ( PCin_prev[7] !== PCin_expected_prev[7] )
		&& ((PCin_expected_prev[7] !== last_PCin_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[7] = PCin_expected_prev[7];
	end
	if (
		( PCin_expected_prev[8] !== 1'bx ) && ( PCin_prev[8] !== PCin_expected_prev[8] )
		&& ((PCin_expected_prev[8] !== last_PCin_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[8] = PCin_expected_prev[8];
	end
	if (
		( PCin_expected_prev[9] !== 1'bx ) && ( PCin_prev[9] !== PCin_expected_prev[9] )
		&& ((PCin_expected_prev[9] !== last_PCin_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[9] = PCin_expected_prev[9];
	end
	if (
		( PCin_expected_prev[10] !== 1'bx ) && ( PCin_prev[10] !== PCin_expected_prev[10] )
		&& ((PCin_expected_prev[10] !== last_PCin_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[10] = PCin_expected_prev[10];
	end
	if (
		( PCin_expected_prev[11] !== 1'bx ) && ( PCin_prev[11] !== PCin_expected_prev[11] )
		&& ((PCin_expected_prev[11] !== last_PCin_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[11] = PCin_expected_prev[11];
	end
	if (
		( PCin_expected_prev[12] !== 1'bx ) && ( PCin_prev[12] !== PCin_expected_prev[12] )
		&& ((PCin_expected_prev[12] !== last_PCin_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[12] = PCin_expected_prev[12];
	end
	if (
		( PCin_expected_prev[13] !== 1'bx ) && ( PCin_prev[13] !== PCin_expected_prev[13] )
		&& ((PCin_expected_prev[13] !== last_PCin_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[13] = PCin_expected_prev[13];
	end
	if (
		( PCin_expected_prev[14] !== 1'bx ) && ( PCin_prev[14] !== PCin_expected_prev[14] )
		&& ((PCin_expected_prev[14] !== last_PCin_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[14] = PCin_expected_prev[14];
	end
	if (
		( PCin_expected_prev[15] !== 1'bx ) && ( PCin_prev[15] !== PCin_expected_prev[15] )
		&& ((PCin_expected_prev[15] !== last_PCin_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[15] = PCin_expected_prev[15];
	end
	if (
		( PCin_expected_prev[16] !== 1'bx ) && ( PCin_prev[16] !== PCin_expected_prev[16] )
		&& ((PCin_expected_prev[16] !== last_PCin_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[16] = PCin_expected_prev[16];
	end
	if (
		( PCin_expected_prev[17] !== 1'bx ) && ( PCin_prev[17] !== PCin_expected_prev[17] )
		&& ((PCin_expected_prev[17] !== last_PCin_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[17] = PCin_expected_prev[17];
	end
	if (
		( PCin_expected_prev[18] !== 1'bx ) && ( PCin_prev[18] !== PCin_expected_prev[18] )
		&& ((PCin_expected_prev[18] !== last_PCin_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[18] = PCin_expected_prev[18];
	end
	if (
		( PCin_expected_prev[19] !== 1'bx ) && ( PCin_prev[19] !== PCin_expected_prev[19] )
		&& ((PCin_expected_prev[19] !== last_PCin_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[19] = PCin_expected_prev[19];
	end
	if (
		( PCin_expected_prev[20] !== 1'bx ) && ( PCin_prev[20] !== PCin_expected_prev[20] )
		&& ((PCin_expected_prev[20] !== last_PCin_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[20] = PCin_expected_prev[20];
	end
	if (
		( PCin_expected_prev[21] !== 1'bx ) && ( PCin_prev[21] !== PCin_expected_prev[21] )
		&& ((PCin_expected_prev[21] !== last_PCin_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[21] = PCin_expected_prev[21];
	end
	if (
		( PCin_expected_prev[22] !== 1'bx ) && ( PCin_prev[22] !== PCin_expected_prev[22] )
		&& ((PCin_expected_prev[22] !== last_PCin_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[22] = PCin_expected_prev[22];
	end
	if (
		( PCin_expected_prev[23] !== 1'bx ) && ( PCin_prev[23] !== PCin_expected_prev[23] )
		&& ((PCin_expected_prev[23] !== last_PCin_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[23] = PCin_expected_prev[23];
	end
	if (
		( PCin_expected_prev[24] !== 1'bx ) && ( PCin_prev[24] !== PCin_expected_prev[24] )
		&& ((PCin_expected_prev[24] !== last_PCin_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[24] = PCin_expected_prev[24];
	end
	if (
		( PCin_expected_prev[25] !== 1'bx ) && ( PCin_prev[25] !== PCin_expected_prev[25] )
		&& ((PCin_expected_prev[25] !== last_PCin_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[25] = PCin_expected_prev[25];
	end
	if (
		( PCin_expected_prev[26] !== 1'bx ) && ( PCin_prev[26] !== PCin_expected_prev[26] )
		&& ((PCin_expected_prev[26] !== last_PCin_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[26] = PCin_expected_prev[26];
	end
	if (
		( PCin_expected_prev[27] !== 1'bx ) && ( PCin_prev[27] !== PCin_expected_prev[27] )
		&& ((PCin_expected_prev[27] !== last_PCin_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[27] = PCin_expected_prev[27];
	end
	if (
		( PCin_expected_prev[28] !== 1'bx ) && ( PCin_prev[28] !== PCin_expected_prev[28] )
		&& ((PCin_expected_prev[28] !== last_PCin_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[28] = PCin_expected_prev[28];
	end
	if (
		( PCin_expected_prev[29] !== 1'bx ) && ( PCin_prev[29] !== PCin_expected_prev[29] )
		&& ((PCin_expected_prev[29] !== last_PCin_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[29] = PCin_expected_prev[29];
	end
	if (
		( PCin_expected_prev[30] !== 1'bx ) && ( PCin_prev[30] !== PCin_expected_prev[30] )
		&& ((PCin_expected_prev[30] !== last_PCin_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[30] = PCin_expected_prev[30];
	end
	if (
		( PCin_expected_prev[31] !== 1'bx ) && ( PCin_prev[31] !== PCin_expected_prev[31] )
		&& ((PCin_expected_prev[31] !== last_PCin_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCin_expected_prev);
		$display ("     Real value = %b", PCin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PCin_exp[31] = PCin_expected_prev[31];
	end
	if (
		( PCOut_expected_prev[0] !== 1'bx ) && ( PCOut_prev[0] !== PCOut_expected_prev[0] )
		&& ((PCOut_expected_prev[0] !== last_PCOut_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[0] = PCOut_expected_prev[0];
	end
	if (
		( PCOut_expected_prev[1] !== 1'bx ) && ( PCOut_prev[1] !== PCOut_expected_prev[1] )
		&& ((PCOut_expected_prev[1] !== last_PCOut_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[1] = PCOut_expected_prev[1];
	end
	if (
		( PCOut_expected_prev[2] !== 1'bx ) && ( PCOut_prev[2] !== PCOut_expected_prev[2] )
		&& ((PCOut_expected_prev[2] !== last_PCOut_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[2] = PCOut_expected_prev[2];
	end
	if (
		( PCOut_expected_prev[3] !== 1'bx ) && ( PCOut_prev[3] !== PCOut_expected_prev[3] )
		&& ((PCOut_expected_prev[3] !== last_PCOut_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[3] = PCOut_expected_prev[3];
	end
	if (
		( PCOut_expected_prev[4] !== 1'bx ) && ( PCOut_prev[4] !== PCOut_expected_prev[4] )
		&& ((PCOut_expected_prev[4] !== last_PCOut_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[4] = PCOut_expected_prev[4];
	end
	if (
		( PCOut_expected_prev[5] !== 1'bx ) && ( PCOut_prev[5] !== PCOut_expected_prev[5] )
		&& ((PCOut_expected_prev[5] !== last_PCOut_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[5] = PCOut_expected_prev[5];
	end
	if (
		( PCOut_expected_prev[6] !== 1'bx ) && ( PCOut_prev[6] !== PCOut_expected_prev[6] )
		&& ((PCOut_expected_prev[6] !== last_PCOut_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[6] = PCOut_expected_prev[6];
	end
	if (
		( PCOut_expected_prev[7] !== 1'bx ) && ( PCOut_prev[7] !== PCOut_expected_prev[7] )
		&& ((PCOut_expected_prev[7] !== last_PCOut_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[7] = PCOut_expected_prev[7];
	end
	if (
		( PCOut_expected_prev[8] !== 1'bx ) && ( PCOut_prev[8] !== PCOut_expected_prev[8] )
		&& ((PCOut_expected_prev[8] !== last_PCOut_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[8] = PCOut_expected_prev[8];
	end
	if (
		( PCOut_expected_prev[9] !== 1'bx ) && ( PCOut_prev[9] !== PCOut_expected_prev[9] )
		&& ((PCOut_expected_prev[9] !== last_PCOut_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[9] = PCOut_expected_prev[9];
	end
	if (
		( PCOut_expected_prev[10] !== 1'bx ) && ( PCOut_prev[10] !== PCOut_expected_prev[10] )
		&& ((PCOut_expected_prev[10] !== last_PCOut_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[10] = PCOut_expected_prev[10];
	end
	if (
		( PCOut_expected_prev[11] !== 1'bx ) && ( PCOut_prev[11] !== PCOut_expected_prev[11] )
		&& ((PCOut_expected_prev[11] !== last_PCOut_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[11] = PCOut_expected_prev[11];
	end
	if (
		( PCOut_expected_prev[12] !== 1'bx ) && ( PCOut_prev[12] !== PCOut_expected_prev[12] )
		&& ((PCOut_expected_prev[12] !== last_PCOut_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[12] = PCOut_expected_prev[12];
	end
	if (
		( PCOut_expected_prev[13] !== 1'bx ) && ( PCOut_prev[13] !== PCOut_expected_prev[13] )
		&& ((PCOut_expected_prev[13] !== last_PCOut_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[13] = PCOut_expected_prev[13];
	end
	if (
		( PCOut_expected_prev[14] !== 1'bx ) && ( PCOut_prev[14] !== PCOut_expected_prev[14] )
		&& ((PCOut_expected_prev[14] !== last_PCOut_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[14] = PCOut_expected_prev[14];
	end
	if (
		( PCOut_expected_prev[15] !== 1'bx ) && ( PCOut_prev[15] !== PCOut_expected_prev[15] )
		&& ((PCOut_expected_prev[15] !== last_PCOut_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[15] = PCOut_expected_prev[15];
	end
	if (
		( PCOut_expected_prev[16] !== 1'bx ) && ( PCOut_prev[16] !== PCOut_expected_prev[16] )
		&& ((PCOut_expected_prev[16] !== last_PCOut_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[16] = PCOut_expected_prev[16];
	end
	if (
		( PCOut_expected_prev[17] !== 1'bx ) && ( PCOut_prev[17] !== PCOut_expected_prev[17] )
		&& ((PCOut_expected_prev[17] !== last_PCOut_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[17] = PCOut_expected_prev[17];
	end
	if (
		( PCOut_expected_prev[18] !== 1'bx ) && ( PCOut_prev[18] !== PCOut_expected_prev[18] )
		&& ((PCOut_expected_prev[18] !== last_PCOut_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[18] = PCOut_expected_prev[18];
	end
	if (
		( PCOut_expected_prev[19] !== 1'bx ) && ( PCOut_prev[19] !== PCOut_expected_prev[19] )
		&& ((PCOut_expected_prev[19] !== last_PCOut_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[19] = PCOut_expected_prev[19];
	end
	if (
		( PCOut_expected_prev[20] !== 1'bx ) && ( PCOut_prev[20] !== PCOut_expected_prev[20] )
		&& ((PCOut_expected_prev[20] !== last_PCOut_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[20] = PCOut_expected_prev[20];
	end
	if (
		( PCOut_expected_prev[21] !== 1'bx ) && ( PCOut_prev[21] !== PCOut_expected_prev[21] )
		&& ((PCOut_expected_prev[21] !== last_PCOut_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[21] = PCOut_expected_prev[21];
	end
	if (
		( PCOut_expected_prev[22] !== 1'bx ) && ( PCOut_prev[22] !== PCOut_expected_prev[22] )
		&& ((PCOut_expected_prev[22] !== last_PCOut_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[22] = PCOut_expected_prev[22];
	end
	if (
		( PCOut_expected_prev[23] !== 1'bx ) && ( PCOut_prev[23] !== PCOut_expected_prev[23] )
		&& ((PCOut_expected_prev[23] !== last_PCOut_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[23] = PCOut_expected_prev[23];
	end
	if (
		( PCOut_expected_prev[24] !== 1'bx ) && ( PCOut_prev[24] !== PCOut_expected_prev[24] )
		&& ((PCOut_expected_prev[24] !== last_PCOut_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[24] = PCOut_expected_prev[24];
	end
	if (
		( PCOut_expected_prev[25] !== 1'bx ) && ( PCOut_prev[25] !== PCOut_expected_prev[25] )
		&& ((PCOut_expected_prev[25] !== last_PCOut_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[25] = PCOut_expected_prev[25];
	end
	if (
		( PCOut_expected_prev[26] !== 1'bx ) && ( PCOut_prev[26] !== PCOut_expected_prev[26] )
		&& ((PCOut_expected_prev[26] !== last_PCOut_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[26] = PCOut_expected_prev[26];
	end
	if (
		( PCOut_expected_prev[27] !== 1'bx ) && ( PCOut_prev[27] !== PCOut_expected_prev[27] )
		&& ((PCOut_expected_prev[27] !== last_PCOut_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[27] = PCOut_expected_prev[27];
	end
	if (
		( PCOut_expected_prev[28] !== 1'bx ) && ( PCOut_prev[28] !== PCOut_expected_prev[28] )
		&& ((PCOut_expected_prev[28] !== last_PCOut_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[28] = PCOut_expected_prev[28];
	end
	if (
		( PCOut_expected_prev[29] !== 1'bx ) && ( PCOut_prev[29] !== PCOut_expected_prev[29] )
		&& ((PCOut_expected_prev[29] !== last_PCOut_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[29] = PCOut_expected_prev[29];
	end
	if (
		( PCOut_expected_prev[30] !== 1'bx ) && ( PCOut_prev[30] !== PCOut_expected_prev[30] )
		&& ((PCOut_expected_prev[30] !== last_PCOut_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[30] = PCOut_expected_prev[30];
	end
	if (
		( PCOut_expected_prev[31] !== 1'bx ) && ( PCOut_prev[31] !== PCOut_expected_prev[31] )
		&& ((PCOut_expected_prev[31] !== last_PCOut_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCOut_expected_prev);
		$display ("     Real value = %b", PCOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PCOut_exp[31] = PCOut_expected_prev[31];
	end
	if (
		( ReadReg1O_expected_prev[0] !== 1'bx ) && ( ReadReg1O_prev[0] !== ReadReg1O_expected_prev[0] )
		&& ((ReadReg1O_expected_prev[0] !== last_ReadReg1O_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg1O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg1O_expected_prev);
		$display ("     Real value = %b", ReadReg1O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadReg1O_exp[0] = ReadReg1O_expected_prev[0];
	end
	if (
		( ReadReg1O_expected_prev[1] !== 1'bx ) && ( ReadReg1O_prev[1] !== ReadReg1O_expected_prev[1] )
		&& ((ReadReg1O_expected_prev[1] !== last_ReadReg1O_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg1O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg1O_expected_prev);
		$display ("     Real value = %b", ReadReg1O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadReg1O_exp[1] = ReadReg1O_expected_prev[1];
	end
	if (
		( ReadReg1O_expected_prev[2] !== 1'bx ) && ( ReadReg1O_prev[2] !== ReadReg1O_expected_prev[2] )
		&& ((ReadReg1O_expected_prev[2] !== last_ReadReg1O_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg1O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg1O_expected_prev);
		$display ("     Real value = %b", ReadReg1O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadReg1O_exp[2] = ReadReg1O_expected_prev[2];
	end
	if (
		( ReadReg1O_expected_prev[3] !== 1'bx ) && ( ReadReg1O_prev[3] !== ReadReg1O_expected_prev[3] )
		&& ((ReadReg1O_expected_prev[3] !== last_ReadReg1O_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg1O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg1O_expected_prev);
		$display ("     Real value = %b", ReadReg1O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadReg1O_exp[3] = ReadReg1O_expected_prev[3];
	end
	if (
		( ReadReg1O_expected_prev[4] !== 1'bx ) && ( ReadReg1O_prev[4] !== ReadReg1O_expected_prev[4] )
		&& ((ReadReg1O_expected_prev[4] !== last_ReadReg1O_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg1O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg1O_expected_prev);
		$display ("     Real value = %b", ReadReg1O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ReadReg1O_exp[4] = ReadReg1O_expected_prev[4];
	end
	if (
		( ReadReg2O_expected_prev[0] !== 1'bx ) && ( ReadReg2O_prev[0] !== ReadReg2O_expected_prev[0] )
		&& ((ReadReg2O_expected_prev[0] !== last_ReadReg2O_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg2O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg2O_expected_prev);
		$display ("     Real value = %b", ReadReg2O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadReg2O_exp[0] = ReadReg2O_expected_prev[0];
	end
	if (
		( ReadReg2O_expected_prev[1] !== 1'bx ) && ( ReadReg2O_prev[1] !== ReadReg2O_expected_prev[1] )
		&& ((ReadReg2O_expected_prev[1] !== last_ReadReg2O_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg2O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg2O_expected_prev);
		$display ("     Real value = %b", ReadReg2O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadReg2O_exp[1] = ReadReg2O_expected_prev[1];
	end
	if (
		( ReadReg2O_expected_prev[2] !== 1'bx ) && ( ReadReg2O_prev[2] !== ReadReg2O_expected_prev[2] )
		&& ((ReadReg2O_expected_prev[2] !== last_ReadReg2O_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg2O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg2O_expected_prev);
		$display ("     Real value = %b", ReadReg2O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadReg2O_exp[2] = ReadReg2O_expected_prev[2];
	end
	if (
		( ReadReg2O_expected_prev[3] !== 1'bx ) && ( ReadReg2O_prev[3] !== ReadReg2O_expected_prev[3] )
		&& ((ReadReg2O_expected_prev[3] !== last_ReadReg2O_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg2O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg2O_expected_prev);
		$display ("     Real value = %b", ReadReg2O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadReg2O_exp[3] = ReadReg2O_expected_prev[3];
	end
	if (
		( ReadReg2O_expected_prev[4] !== 1'bx ) && ( ReadReg2O_prev[4] !== ReadReg2O_expected_prev[4] )
		&& ((ReadReg2O_expected_prev[4] !== last_ReadReg2O_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadReg2O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadReg2O_expected_prev);
		$display ("     Real value = %b", ReadReg2O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ReadReg2O_exp[4] = ReadReg2O_expected_prev[4];
	end
	if (
		( RegWriteOut_expected_prev !== 1'bx ) && ( RegWriteOut_prev !== RegWriteOut_expected_prev )
		&& ((RegWriteOut_expected_prev !== last_RegWriteOut_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWriteOut_expected_prev);
		$display ("     Real value = %b", RegWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RegWriteOut_exp = RegWriteOut_expected_prev;
	end
	if (
		( WriteRegO_expected_prev[0] !== 1'bx ) && ( WriteRegO_prev[0] !== WriteRegO_expected_prev[0] )
		&& ((WriteRegO_expected_prev[0] !== last_WriteRegO_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegO_expected_prev);
		$display ("     Real value = %b", WriteRegO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WriteRegO_exp[0] = WriteRegO_expected_prev[0];
	end
	if (
		( WriteRegO_expected_prev[1] !== 1'bx ) && ( WriteRegO_prev[1] !== WriteRegO_expected_prev[1] )
		&& ((WriteRegO_expected_prev[1] !== last_WriteRegO_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegO_expected_prev);
		$display ("     Real value = %b", WriteRegO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WriteRegO_exp[1] = WriteRegO_expected_prev[1];
	end
	if (
		( WriteRegO_expected_prev[2] !== 1'bx ) && ( WriteRegO_prev[2] !== WriteRegO_expected_prev[2] )
		&& ((WriteRegO_expected_prev[2] !== last_WriteRegO_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegO_expected_prev);
		$display ("     Real value = %b", WriteRegO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WriteRegO_exp[2] = WriteRegO_expected_prev[2];
	end
	if (
		( WriteRegO_expected_prev[3] !== 1'bx ) && ( WriteRegO_prev[3] !== WriteRegO_expected_prev[3] )
		&& ((WriteRegO_expected_prev[3] !== last_WriteRegO_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegO_expected_prev);
		$display ("     Real value = %b", WriteRegO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WriteRegO_exp[3] = WriteRegO_expected_prev[3];
	end
	if (
		( WriteRegO_expected_prev[4] !== 1'bx ) && ( WriteRegO_prev[4] !== WriteRegO_expected_prev[4] )
		&& ((WriteRegO_expected_prev[4] !== last_WriteRegO_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegO_expected_prev);
		$display ("     Real value = %b", WriteRegO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_WriteRegO_exp[4] = WriteRegO_expected_prev[4];
	end
	if (
		( ZeroOut_expected_prev !== 1'bx ) && ( ZeroOut_prev !== ZeroOut_expected_prev )
		&& ((ZeroOut_expected_prev !== last_ZeroOut_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZeroOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZeroOut_expected_prev);
		$display ("     Real value = %b", ZeroOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ZeroOut_exp = ZeroOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ProcessorMIPSBenchTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GResetBar;
reg [2:0] ValueSelect;
// wires                                               
wire [31:0] BranchAddressO;
wire [31:0] BranchMuxO;
wire [31:0] BranchOffsetO;
wire BranchOut;
wire [31:0] InstructionOut;
wire [31:0] JumpAddressO;
wire JumpO;
wire MemWriteOut;
wire [7:0] MuxOut;
wire [31:0] PC4AddedO;
wire [31:0] PCin;
wire [31:0] PCOut;
wire [4:0] ReadReg1O;
wire [4:0] ReadReg2O;
wire RegWriteOut;
wire [4:0] WriteRegO;
wire ZeroOut;

wire sampler;                             

// assign statements (if any)                          
ProcessorMIPSBenchTest i1 (
// port map - connection between master ports and signals/registers   
	.BranchAddressO(BranchAddressO),
	.BranchMuxO(BranchMuxO),
	.BranchOffsetO(BranchOffsetO),
	.BranchOut(BranchOut),
	.GClock(GClock),
	.GResetBar(GResetBar),
	.InstructionOut(InstructionOut),
	.JumpAddressO(JumpAddressO),
	.JumpO(JumpO),
	.MemWriteOut(MemWriteOut),
	.MuxOut(MuxOut),
	.PC4AddedO(PC4AddedO),
	.PCin(PCin),
	.PCOut(PCOut),
	.ReadReg1O(ReadReg1O),
	.ReadReg2O(ReadReg2O),
	.RegWriteOut(RegWriteOut),
	.ValueSelect(ValueSelect),
	.WriteRegO(WriteRegO),
	.ZeroOut(ZeroOut)
);

// GClock
initial
begin
	GClock = 1'b0;
	GClock = #10000 1'b1;
	GClock = #30000 1'b0;
	GClock = #40000 1'b1;
	GClock = #50000 1'b0;
	GClock = #50000 1'b1;
	GClock = #50000 1'b0;
end 

// GResetBar
initial
begin
	GResetBar = 1'b1;
end 
// ValueSelect[ 2 ]
initial
begin
	ValueSelect[2] = 1'b1;
end 
// ValueSelect[ 1 ]
initial
begin
	ValueSelect[1] = 1'b1;
end 
// ValueSelect[ 0 ]
initial
begin
	ValueSelect[0] = 1'b1;
end 

ProcessorMIPSBenchTest_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GResetBar(GResetBar),
	.ValueSelect(ValueSelect),
	.sampler_tx(sampler)
);

ProcessorMIPSBenchTest_vlg_check_tst tb_out(
	.BranchAddressO(BranchAddressO),
	.BranchMuxO(BranchMuxO),
	.BranchOffsetO(BranchOffsetO),
	.BranchOut(BranchOut),
	.InstructionOut(InstructionOut),
	.JumpAddressO(JumpAddressO),
	.JumpO(JumpO),
	.MemWriteOut(MemWriteOut),
	.MuxOut(MuxOut),
	.PC4AddedO(PC4AddedO),
	.PCin(PCin),
	.PCOut(PCOut),
	.ReadReg1O(ReadReg1O),
	.ReadReg2O(ReadReg2O),
	.RegWriteOut(RegWriteOut),
	.WriteRegO(WriteRegO),
	.ZeroOut(ZeroOut),
	.sampler_rx(sampler)
);
endmodule

